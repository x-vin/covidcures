{"remainingRequest":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/x/repos/covidcures/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/x/repos/covidcures/docs/src/ayurvedic.md?vue&type=template&id=51275a8c&","dependencies":[{"path":"/Users/x/repos/covidcures/docs/src/ayurvedic.md","mtime":1640947850722},{"path":"/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js","mtime":1640777136168},{"path":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640777136396},{"path":"/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js","mtime":1640777136168},{"path":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/index.js","mtime":1640777136291},{"path":"/Users/x/repos/covidcures/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1640777135896}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "ayurvedic-treatments" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#ayurvedic-treatments" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Ayurvedic Treatments"),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("DISCLAIMER")]),
        _vm._v(
          ": This information is for educational purposes only. It is not intended to serve as a substitute for diagnosis, treatment, or advice from a qualified, licensed medical professional. Any treatment you undertake should be discussed with your physician or other licensed medical professional."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("NOTE")]),
        _vm._v(
          ': The information in this tabulation about dosages is primarily for adults. The dosages for children have been mentioned in the case of a few over-the-counter remedies where the data was available."'
        ),
      ]),
      _vm._v(" "),
      _c(
        "h2",
        {
          attrs: {
            id: "_1-ayush-prescribed-medicinal-herbs-and-their-corresponding-ayurvedic-remedies",
          },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#_1-ayush-prescribed-medicinal-herbs-and-their-corresponding-ayurvedic-remedies",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            " 1. AYUSH-prescribed medicinal herbs and their corresponding Ayurvedic remedies"
          ),
        ]
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objective" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objective" } },
          [_vm._v("#")]
        ),
        _vm._v(" Objective:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Prophylaxis and mitigation")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "system" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#system" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" System:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Ayurveda")]),
      _vm._v(" "),
      _c(
        "h3",
        { attrs: { id: "can-be-used-alongside-other-allopathic-treatments" } },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-be-used-alongside-other-allopathic-treatments",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(" Can be used alongside other allopathic treatments:"),
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Should be possible in most cases, but needs to be verified"),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "status-of-authorisation" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#status-of-authorisation" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Status of authorisation:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Authorized by AYUSH Ministry, and based on scientific evidence"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocol-and-treatment-approach" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocol-and-treatment-approach" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Protocol and treatment approach:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"The list of 20 published medicinal plants and other details are as follows:'
        ),
      ]),
      _vm._v(" "),
      _c(
        "h1",
        {
          attrs: {
            id: "vernacular-names-in-tamil-sanskrit-english-hindi-scientific-name-part-used-indications-dosage-important-ayurvedic-formulations",
          },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#vernacular-names-in-tamil-sanskrit-english-hindi-scientific-name-part-used-indications-dosage-important-ayurvedic-formulations",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            " (Vernacular names in Tamil / Sanskrit / English / Hindi, Scientific name, Part used, Indications, Dosage, Important Ayurvedic formulations)"
          ),
        ]
      ),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("p", [
            _vm._v(
              "Amukara / Aswagandha / Winter cherry, Withania somnifera, Root / leaf, dyspnoea / fatigue or weakness / emaciation / tumour / insomnia / antiinflammatory / antipyretic / antibacterial / antimalarial / immunomodulator / cardioprotective, 3-6 g powder, Aswagandha churna / Aswagandha arishtam"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Amrithavalli / Guduchi / Heart-leaved moon seed / Giloy, Tinospora cordifolia, stem / leaf / root, antioxidant / antiinflammatory / immunomodulator / protective of liver, 2-6 g powder / 50-100 ml decoction / 10-20 ml fresh juice, Amrithadi kashayam / Amritharishtam / Amrithadi guggulu"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Nilavembu / Kalamegha / Green chiretta / Kirayat, Andrographis paniculata, whole plant, antiviral / antipyretic / immune enhancement / thrombolytic, 1-3 g powder / 20-40 ml decoction / 5-10 ml fresh juice, Bhunimbadi choorna / Bhunimbadi kashaya"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Tulasi / Tulasi / Sacred basil / Tulsi, Ocimum tenuiflorum, leaf / root / seed, cough / dyspnoea / worms / viral hepatitis / toxicity / intermittent fever / antiviral / antifungal / antibacterial, 3-6 g seed powder / 10-20 ml fresh juice / 50-100 ml root decoction, Surasadigana kashayam / Tumburvadi yoga"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Tirunittru pacchilai / Vantulasi / Sweet basil / Babui tulasi, Ocimum basilicum L., leaf / flower, antiviral / antimicrobial / antioxidant / antiinflammatory / antiallergenic / lung complaints / intestinal parasites, 3-5 ml juice / 3-6 g seed powder, Surasadigana kashayam / Tumburvadi yoga"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Ilavangam / Tvak / Cinnamon / Dalchini, Cinnamon verum Presl, stem bark, anti-complement activity / antiallergenic activity / rhinitis / cough / headache / cardiac ailments / indigestion / antihelminthic, 1-3 g powder, Eladi rasayanam / Sitopaladi choorna / Samasarkara choorna"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Inji or chukku / Ardraka / Ginger / Adrak or sonth, Zingiber officinale Roscoe, rhizome, fever / cough / dyspnoea / heart disease / bleeding disorder / anaemia / antibacterial / antihistaminic / antioxidant / antiinflammatory / hypolipidemic / bioavailability enhancer / hypoglycaemic, Adraka rasayana / Ardraka khandavalehya / Nagaradi kashaya"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Manjal / Haridra / Turmeric / Haldi, Curcuma longa L., rhizome, antibacterial / antioxidant / antiinflammatory / antihistamine / antiseptic / hypocholesterolenic / bronchitis / respiratory illness / bronchial asthma / tropical eosinophilia / diabetes / anaemia / jaundice / skin disease / detoxifying agent, 1-3 g powder, Haridrakhanda / Nisamalaki choornam"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Nellikkai / Amalaki / Gooseberry / Amla, Phylanthus emblica L., fruit pulp, antibacterial / antimicrobial / antioxidant / antiinflammatory / hepatoprotective / hypolipidemic / hypoglycaemic / diabetes / antiatherosclerotic / bleeding disorders / ulcer, 10-20 ml fresh juice / 3-6 g powder, Chyavanaprasha avalehyam / Amalakadi choorna"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Nilavembu / Kiratatikta / Chiretta / Chirayata, Swertia chirata, whole plant, fever / gouty arthritis / oedema / chronic liver diseases / antipyretic / antiarthritic / antidiabetic / hepatoprotective, 1-3 g powder / 50-100 ml decoction, Kiratadi kwatha / Sudarsana choorna / Kiratatiktadi choorna / Kiratarishta"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Atimadhuram / Yashtimadhu / Liquorice / Mulethi, Glycyrrhiza glabra L., root, antipyretic / antiinflammatory / antiarthritis / antidiuretic / rejuvenative / cardiovascular tonic / improves strength, 3-5 g powder, Yashtyadi choorna / Madhuyashtyadi tailam"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Vembu or veppu / Nimba / Neem or margosa tree / Neem, Azadirachta indica, root bark / stem bark / leaves, antimicrobial / immunostimulant / antiinflammatory / antidiabetic / antiarthritic / improves cardiovascular activity, 2-4 g bark powder / 10-20 ml fresh juice, Nimba haridrakhanda / Nimbadi choorna / Pancha nimba choorna"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Adathodai vasa / Malabar nut / Adusa / Justicia Adathoda, leaf / root / flower, fever / cough / dyspnoea / consumption / bleeding disorder / anaemia / diarrhoea / skin diseases / bronchodilator / advantages in attenuating the critical inflammatory stages of Covid-19, 10-20 ml leaf juice, Vasarishtam / Vasavalehya"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Kacholam / Sathi / Spiked ginger lily / Kapurkachari, Hedychium spicatum, rhizome, cough / relieves violent expression of dyspnoea / hiccough, antibacterial / antifungal / antiinflammatory / hypoglycaemic/ vasodilator / relieving paroxysmal attack of dyspnoea / tranquilizer, 1-3 g powder, Sathyadi choorna"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Pushkaramulam / Pushkaramula / Elicampane / Pokharmul, Inula racemosa, root, cough / dyspnoea / bronchospasm / pulmonary infections / anaemia / cardiac ailments / antipyretic / antifungal / antibacterial / antiinflammatory / antihistaminic / hypoglycaemic / antianginal / hypolipidemic, 1-3 g powder, Pushkaraadi choorna / Pushkaraadi kashaya"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Kavali / Bharangi / Blue-flowered glory tree / Babhanaiti, Clerrodendrum serratum, root, fever / rhinitis / cough / dyspnoea / oedema / antipyretic / antihistamine, 3-6 g powder, Bharngyaadi kashaya / Bharngi guda"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Kiraampu / Lavanga / Clove / Laung, Syzygium aromaticum, dried floral bud, consumption /  cough / dyspnoea / vomiting / bleeding disorders / antiviral / bactericidal / fungicidal / antiinflammatory / anticarcinogenic, 1-2 g powder, Lavangadi vati / Lavangadi choorna / Devakusuma arka"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Elumichampullu / Lamajjaka / Lemon grass or Citronella / Lamjak, Cymbopogon jwarancusa, whole plant, fever / gout / rheumatism / skin disease / antioxidant / diuretic / diaphoretic / blood purefier, 3-5 g powder"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Katukarohini / Katuki / Picrorhiza / Kutki, Pichrorhiza kurroa, root / underground stem, fever / intermittent fever / dyspnoea / cough / skin diseases / antidiabetes / antipyretic / antiinflammatory / antibacterial / mitigate allergy and asthma / hydrocholeretic, 0.5-1 g powder (5-6 g powder for use as purgative) in warm water, Tiktakadya ghrtam / Katukadya ghrtam / Aarogyavardhini vati"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              'Annachi poo / Mishi / Chinese star anise / Chakr phool or Anasphal, Ilicium verum, fruit, abdominal pain and digestive ailments / cough / diuretic / influenza / antibacterial / antviral / antifungal /  analgesic / antioxidant / expectorant / spasmolytic / carminative, 3 g powder\n"'
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "typical-duration-of-treatment" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#typical-duration-of-treatment" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Typical duration of treatment:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "These herbs are employed as part of protocols prescribed by knowledgeable physicians."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "outcome" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#outcome" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Outcome:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The herbs are demonstrated to have positive therapeutic outcomes, upon which the Ayush recommendations were based."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "significant-side-effects" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#significant-side-effects" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Significant side effects:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "No significant side effects reported, when used in therapeutic dosages. Many of these herbs rejuvenate health holistically and revitalize the body."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "recommended-quantity-for-stocking" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#recommended-quantity-for-stocking" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Recommended quantity for stocking:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A few medicines like Ashwagandha choornam, Amrithaadi kashayam, could be stocked and used as prophylactic."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "price" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#price" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Price:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Moderately priced for the middle class consumer")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "suggested-suppliers" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#suggested-suppliers" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Suggested suppliers:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Local suppliers of Ayurvedic medicines like Kottakkal Arya Vaidya Sala pharmacies"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "further-references" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#further-references" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Further references:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "\"20 Medicinal Plants of '21 for Covid-19 Care,\nNational Medicinal Plants Board, Ministry of Ayush, Government of India"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Spices and herbs: Potential antiviral preventives and immunity boosters during COVID‐19- Curcumin, Cinnamon, Ginger, Clove, Black pepper, Garlic, Neem, Giloy, Holy basil; Namita Ashish Singh et al.; Phytotherapy Research; Jan 29, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("academia.edu: Indian Medicinal Plants; Sachin Chandran"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Herbal plants as immunity modulators against COVID-19: A primary preventive measure during home quarantine; Kuntal Das; Journal of Herbal Medicine; Aug 5, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c(
        "h2",
        {
          attrs: {
            id: "_2-the-central-ministry-ayush-approved-national-clinical-management-protocol-based-on-ayurveda-and-yoga-for-management-of-covid-19",
          },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#_2-the-central-ministry-ayush-approved-national-clinical-management-protocol-based-on-ayurveda-and-yoga-for-management-of-covid-19",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            " 2. (The Central Ministry) AYUSH-approved National Clinical Management Protocol Based On Ayurveda And Yoga For Management Of Covid-19"
          ),
        ]
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objective-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objective-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" Objective:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Evidence-based prescription for the use of Ayurveda and yoga for the prevention of Covid-19, and for the treatment of asymptomatic or mild infection"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "system-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#system-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" System:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Ayurveda and Yoga, Ayush")]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: { id: "can-be-used-alongside-other-allopathic-treatments-2" },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-be-used-alongside-other-allopathic-treatments-2",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(" Can be used alongside other allopathic treatments:"),
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Probably yes, but under the advice of a medical practitioner. Usage alongside allopathic protocols is not guaranteed to yield the best results, according to experienced doctors."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "status-of-authorisation-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#status-of-authorisation-2" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Status of authorisation:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Approved by the Government of India, Ayush Ministry.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocol-and-treatment-approach-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocol-and-treatment-approach-2" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Protocol and treatment approach:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v('"General lifestyle measures for prophylactic treatment:'),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v(
            "Maintain social distancing, respiratory and hand hygiene and masking."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Gargle with warm water with an added pinch of turmeric and salt. Water boiled with Triphala choorna or Yashtimadhu too can be used for gargling."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Perform Ayurvedic Nasya (instillation or application of plain or medicated oils in the nose) once or twice a day, especially before going out and after coming back home. Plain oils like coconut oil / sesame oil / cow's ghee or medicated oils like Anu taila / Shadbindu taila could be applied."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Perform steam inhalation with Ajwain / Mint or Pudina / Eucalyptus oil once a day (being cautious not to burn or damage the upper respiratory passage)."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Follow a healthy dietary and lifestyle regimen everyday, with adequate sleep of 6-8 hours, a balanced diet and moderate physical exercise."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Follow Yoga Protocol for Primary Prevention of COVID-19 (ANNEXURE-1 of the referenced document) and Protocol for Post COVID-19 care (including care for COVID-19 patients) (ANNEXURE-2) - as applicable."
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Prescribed dietary regimen for prophylaxis:")]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [_vm._v("Consume fresh, warm and balanced meals.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Use warm water boiled with ginger root / corriander seeds / Thulasi or Holy basil  leaves / Jeera or cumin seeds for drinking."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Drink Ayush Kadha or Kwath (hot infusion or decoction) once a day."
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Prophylactic measures for high-risk population and primary contacts:"
        ),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v(
            "Take Ashwagandha (500 mg aqueous extract or 1-3 g powder), twice daily with warm water, on an empty stomach, after waking up in the morning and before going to sleep, for 15-30 days or as advised by Ayurveda physician."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Guduchi ghana vati / Samshamani vati (500 mg aqueous extract as Samshamani ghanavati / Giloy or Amrithavalli ghanavati, or 1-3 g Amrithavalli choorna) twice a day with warm water, with or after meals, for 15-30 days or as directed by Ayurveda physician"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Chyavanapraasha (containing about 50 traditional ingredients, chiefly Amla / Indian gooseberry / Emblica officinalis, the richest plant source of vitamin C), 10 g with warm water or milk, once a day, on an empty stomach in the morning before breakfast"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "(Ashwagandha is deemed a safer prophylactic therapy than Hydroxychloroquine.)"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Treatment for asymptomatic Covid-positive individuals, to prevent the disease progression to symptomatic Covid:"
        ),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v(
            "Guduchi ghanavati (500 mg aqueous extract as Samshamani ghanavati or Giloy / Amrithavalli ghanavati or 1-3 g Amrithavalli choorna) twice a day with warm water, with or after meals, for 15-30 days or as directed by Ayurveda physician"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Guduchi or Amrithavalli or Giloy, and Pippali or pepper, 375 mg of aqueous extracts twice daily with warm water for 15-30 days or as advised by Ayurveidc physician"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "AYUSH64, 500 mg 2 times (3 times for symptomatic infection) daily 1 hour after meals, with warm water, for 15-30 days or as directed by Ayurveda physician"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Treatment of mild Covid positive cases without evidence of breathlessness or hypoxia:"
        ),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v(
            "Guduchi or Amrithavalli or Giloy, and Pippali or pepper, 375 mg of aqueous extracts twice daily with warm water, with or after meals, for 15-30 days or as advised by Ayurveidc physician"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "AYUSH64, 500 mg 3 times daily, 1 hour after meals, with warm water for 15-30 days or as directed by Ayurveda physician"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Post-Covid management for prevention of lung complications like fibrosis, fatigue and mental health:"
        ),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v(
            "Take Ashwagandha (500 mg aqueous extract or 1-3 g powder), twice daily with warm water, on an empty stomach after waking up in the morning and before going to sleep, for 15-30 days or as advised by Ayurveda physician."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Chyavanapraasha, 10 g with warm water or milk, once a day, on an empty stomach in the morning or before breakfast"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rasayana choorna (With equal parts of Giloy or Amrithavalli, Amla or gooseberry and Tribulus terrestris / Gokshura / Caltrops / Gokhru / Njerinjil, ), 3 g powder twice daily with honey for 30 days, or as directed by the Ayurveda physicians"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The protocol includes Praanayaama, breathing and yoga exercises. In the Praanayaama and breathing exercises, the duration of exhalation should exceed that of inhalation, and ideally be twice the duration of inhalation."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A 45-minute sequence of Yoga, Pranayama and meditation, as detailed in the reference document, is incorporated into the routine for prophylactic care or primary prevention.. These include the following:"
        ),
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Loosening exercises like neck bending (2 min), shoulder movement (2 min), trunk movement (1 m), knee movement (1 m),"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Standing Aasanaas like Tadaasana (1 m), Paada Hastaasa (1 m), Ardha Chakraasana (1 m), Trikonaasana (2 m),"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Sitting Aasanaas like Ardha Ushtraasana (1 m), Sasakaasana (1 m), Utthana Mandukaasana (1 m), Simhaasana (1 m), Marjariaasana (1 m), Vakraasana (2 m),"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Aasanaas while lying prone, like Makaraasana (1 m), Bhujaangaasana (1 m),"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Aasanaas while lying supine, like Setubandhaasana (1 m), Utthanapaadaasana (1 m), Pavana Muktaasana (1 m), Markataasana (1 m), Shavaasana (2 m),"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Kriyas like Vaata Neti (2 rounds in about 2 minutes, 30 seconds each with 30 seconds relaxation), Kapaalabhaati (2 rounds in about 2 minutes, 30 breaths each),"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Praanayaama, including Nadi Shodhana (5 rounds in 2 minutes), Surya Bhedana Praanayaama (5 rounds in 2 m), Ujjayi Praanayaama (5 rounds ini 2 m), Bhramari Praanayaama (5 rounds in 2 m), Dhyaana (5 m), Shanti Patha (1 m)"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Yoga protocol for post-Covid care as well as for Covid-19 patients, including Praanayaama and breathing exercises to improve lung volume and reduce asthma allergies and lung inflammation:"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Morning session (30 minutes):")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Preparatory practices, performed while sitting: Tadaasana, Urdhva Hastottanaasana, Uttana Mandukaasana, shoulder rotation (3 rounds), trunk twisting (3 rounds), Ardha Ushtraasana, Sasakaasana"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breathing practices, like Vaataneti (2 rounds, 30 seconds per round, over 2 min), Kapaalabhaati (3 rounds, 30 seconds per round, 2 m) and deep breathing (10 rounds, 2 m)"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Praanayaama practices, like Naadishodhana (10 rounds in 6 min), Ujjayee (10 rounds in 3 m), Bhramari (10 rounds in 3 m)"
          ),
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Meditation or Dhyaana for 6 minutes")]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Evening session (15 minutes):")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Shavaasana (1 round, 1 m)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Abdominal breathing (10 rounds, 2 m)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Thoracic breathing (10 rounds, 2 m)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Clavicular breathing (10 rounds, 2 m)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Deep breathing, lying down (10 rounds, 2 m)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Relaxation in Shavaasana, with awareness on abdominal breathing (5 m)"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Other measures:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Steam inhalation advised everyday or every alternate day"),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Advised to gargle with lukewarm saline water regularly"),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Kriya Jalaneti to decongest the nasal and upper respiratory tract, but not recommended in case of dry cough"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Protocol for management of mild Covid-19 cases:\nThe Ayush protocol recommends symptomatic redressal as follows:"
        ),
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Fever with bodyache, headache: Nagaraadi Kashaaya (20 ml twice a day, or as recommended by qualified Ayurvedic physician)"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Cough: Sitopalaadi Choorna with honey (2 g with honey, or as recommended by Ayurvedic physician)"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Sore throat, loss of taste: Vyoshaadi vati (1-2 pills to be chewed as required, or as directed by Ayurvedic physician)"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Fatigue: Chyavanapraasha (10 g with warm water or milk once a day, or as directed by Ayurvedic physician)"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Hypoxia: Vasavaleha (10 g with warm water, once a day, or as directed by Ayurvedic physician)"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Diarrhoea: Kutaja Ghana Vati (500 mg- 1 g thrice a day, or as directed by Ayurvedic physician)"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Breathlessness: Kanakaasava (10ml with equal amount of water, twice a day, or as directed by Ayurvedic physician)"
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "typical-duration-of-treatment-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#typical-duration-of-treatment-2" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Typical duration of treatment:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "About 15 days of medication required for the treatment of mild Covid, according to the Ayush Ministry publication, National Clinical Management Protocol Based On Ayurveda And Yoga For Management Of Covid-19"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "outcome-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#outcome-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" Outcome:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"The protocols are known to offer significant benefits as prophylactic measure, and for the treatment of mild or moderate Covid-19, as well as in the treatment of long Covid.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The efficacy of AYUSH64 was scientifically studied in asymptomatic, mild and moderate disease without risk factors for poor outcome and those not requiring emergency interventions or hospitalization are eligible to take Ayush-64. Mild to moderate COVID-19 cases showing initial symptoms like fever, malaise, body ache, nasal congestion, nasal discharge, headache, cough etc. and asymptomatic cases of COVID-19 can preferably start AYUSH- 64 within 7 days of diagnosis of the disease through RT-PCR for better outcome.  It has been scientifically found to be useful in the treatment of asymptomatic, mild and moderate COVID-19 infection as an adjunct to standard care through robust clinical trials conducted in the country. The results of the clinical trials demonstrated that AYUSH-64 as an adjunct to standard of care (SoC) showed clinically significant improvement and thus lesser period of hospitalization as compared to SoC alone."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'A study recorded: The experimental studies of AYUSH-64 have shown that it was safe and non-toxic in the dose of 500 mg / kg of body weight for 12 weeks. It is found to be effective in fevers of unknown etiology, filarial lymphangitis and derangement of liver function besides its anti -malarial activity. Various Ayurveda classics describe activities and properties of the ingredients of AYUSH-64 in respiratory diseases and also acute infectious diseases with pulmonary complications. "'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "significant-side-effects-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#significant-side-effects-2" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Significant side effects:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "None reported for therapeutic dosages; generally deemed safe and nontoxic. A study recorded that the experimental studies of AYUSH-64 have shown that it was safe and non-toxic in the dose of 500 mg / kg of body weight for 12 weeks."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "recommended-quantity-for-stocking-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#recommended-quantity-for-stocking-2" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Recommended quantity for stocking:"),
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("VACANT")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "price-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#price-2" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Price:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ayurvedic medicines from Kottakkal Arya Vaidyasala are modestly priced."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "suggested-suppliers-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#suggested-suppliers-2" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Suggested suppliers:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Local trusted Ayurvedic pharmacies like Kottakkal Arya Vaidya Sala and online stores'
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("1mg.com: Basic Ayurveda Ayush 64 Tablet")]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "further-references-2" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#further-references-2" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Further references:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"“AYU SAMVAD” | Ayurveda for Covid 19 | “My Health My Responsibility”; All India Institute of Ayurveda, An Autonomous Institute under Ministry of AYUSH, Government of India, New Delhi- NABH Accredited Tertiary care Hospital and Post Graduate Teaching and Training Institute in Ayurveda'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "National Clinical Management Protocol Based On Ayurveda And Yoga For Management Of Covid-19- Frequently Asked Questions; Government of India, Ministry of Ayush"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "National Clinical Management Protocol Based On Ayurveda And Yoga For Management Of Covid-19, approved by the Ayush Ministry, Government Of India"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Scientific rationale of Indian AYUSH Ministry advisory for COVID-19 prevention, prophylaxis, and immunomodulation; Prashant Kumar Gupta et al.; April 29, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Significance of AYUSH: India's first line of defence against COVID-19; Journal of Ayurvedic and Integrative Medicine; April 1, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Ashwagandha: Wonder Herb of India")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Appropriate use of essential oils and their components in the management of upper respiratory tract symptoms in patients with COVID-19; Marco Valussi; Journal of Herbal Medicine; August, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Do saline water gargling and nasal irrigation confer protection against COVID-19?; Prashanth Panta et al.; Elsevier Public Health Emergency Collection; March, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "An overview of Tulsi (Holy basil); Simranjeet Kaur et al.; European Journal of Molecular & Clinical Medicine; 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Tulsi - Ocimum sanctum: A herb for all reasons; Marc Maurice Cohen; Journal of Ayurveda and Integrative Medicine; 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "“Tulsi” - the Wonder Herb (Pharmacological Activities of Ocimum Sanctum); Sai Krishna G. et al.; American Journal of Ethnomedicine; 2014"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A Community-Based Participatory Research to Assess the Feasibility of Ayurveda Intervention in Patients with Mild-to-Moderate COVID-19; Vishwesh Kulkarni; MedRxiv; Jan, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Economic Times- Healthworld.com: Ashwagandha can be effective COVID-19 preventive drug, finds research by IIT Delhi and Japan's AIST; May, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Targeting COVID-19 (SARS-CoV-2) main protease through active phytochemicals of ayurvedic medicinal plants – Withania somnifera (Ashwagandha), Tinospora cordifolia (Giloy) and Ocimum sanctum (Tulsi) – a molecular docking study; Priya Shree et al.; Journal of Biomolecular Structure and Dynamics; Aug, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "News 18: Can Giloy Boost Immunity, Fight COVID? IISER Bhopal Researchers Find Out; Sept 6, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "india.com: Here is How Giloy And Ashwagandha Treat Coronavirus: Giloy and Ashwagandha have a significant role to play in the treatment of the novel coronavirus infection."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "An Overview on Ashwagandha: A Rasayana (Rejuvenator) of Ayurveda; Narendra Singh et al.; African Journal of Traditional, Complementary and Alternate Medicine; 2011"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Withania somnifera (Ashwagandha) as a safer option to hydroxychloroquine in the chemoprophylaxis of COVID-19: Results of interim analysis; Arvind Chopra et al.; Complementary Therpies in Medicine; Nov, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Thermal inactivation of SARS COVID-2 virus: Are steam inhalations a potential treatment; Giancarlo la Marca et al.; Life Sciences; Jan 15, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A critical analysis of CTRI registered AYUSH studies for COVID- 19; Vedvati Bhapkar et al.; Journal of Ayurveda and Integrative Medicine; Nov 26, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Targeting COVID-19 (SARS-CoV-2) main protease through active phytochemicals of ayurvedic medicinal plants – Withania somnifera (Ashwagandha), Tinospora cordifolia (Giloy) and Ocimum sanctum (Tulsi) – a molecular docking study; Priya Shree et al.; Journal of Biomolecular Structure and Dynamics; Aug 27, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("CSIR India- Details of AYUSH64")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Planet Ayurveda (TM): Gokshura (Tribulus Terrestris / Puncture vine)- Uses, Benefits, Ayurvedic Effects; Dr. Meenakshi Chauhan; May 7, 2019"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c(
        "h2",
        {
          attrs: {
            id: "_3-sh-bonigi-anandaiah-s-ayurvedic-treatment-for-covid-19-in-krishnapatnam-village-nellore-district-andhra-pradesh",
          },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#_3-sh-bonigi-anandaiah-s-ayurvedic-treatment-for-covid-19-in-krishnapatnam-village-nellore-district-andhra-pradesh",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            " 3. Sh. Bonigi Anandaiah's Ayurvedic treatment for Covid-19 in Krishnapatnam village, Nellore district, Andhra Pradesh"
          ),
        ]
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objective-3" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objective-3" } },
          [_vm._v("#")]
        ),
        _vm._v(" Objective:"),
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("VACANT")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "system-3" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#system-3" } },
          [_vm._v("#")]
        ),
        _vm._v(" System:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Ayurveda / Indigenous")]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: { id: "can-be-used-alongside-other-allopathic-treatments-3" },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-be-used-alongside-other-allopathic-treatments-3",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(" Can be used alongside other allopathic treatments:"),
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Perhaps yes, as this has not been specifically mentioned in reports"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "status-of-authorisation-3" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#status-of-authorisation-3" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Status of authorisation:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Authorized to treat for Covid by the Andhra Pradesh government, but Sh. Bonigi is reportedly not a physician by training. It is said that the knowledge of this reportedly wonderful herbal therapy was given to him by a wandering traditional mendicant, and prepared and shared by him with many others."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocol-and-treatment-approach-3" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocol-and-treatment-approach-3" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Protocol and treatment approach:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"The protocol is said to involve three forms of therapeutic medication:'
        ),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v(
            "Preventative / prophylactic oral medication, administered over 5 successive days, with the recommendation not to consume any animal protein or alcohol during that period"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Curative medication to address symptoms for affected patients in the early stages of the disease"
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Medication in the form of eye drops for those in critical stages of the illness."
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "typical-duration-of-treatment-3" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#typical-duration-of-treatment-3" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Typical duration of treatment:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Rapid recovery, reportedly often in under 5 days")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "outcome-3" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#outcome-3" } },
          [_vm._v("#")]
        ),
        _vm._v(" Outcome:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It is reported in media that patients from far away cities have travelled to receive the treatment, and that thousands of patients have been treated so far with not a single fatality. Video documentaries testify that thousands of patients, many in the critical stages of the disease, flock to the treatment centre, and benefit very quickly."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "significant-side-effects-3" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#significant-side-effects-3" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Significant side effects:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Not many known, though a few people have been affected by conjunctivitis after being administered the eye drops."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "recommended-quantity-for-stocking-3" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#recommended-quantity-for-stocking-3" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Recommended quantity for stocking:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The medicine cannot be refrigerated and therefore cannot be stocked in advance of a few days."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "price-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#price-3" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Price:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The medicine is extremely inexpensive and costs INR 10. For distance deliveries, shipping is charged. Distance orders are undertaken when orders are placed by a group of 10-50 people, in which case INR 50/- is charged for shipping per group of four people."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "suggested-suppliers-3" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#suggested-suppliers-3" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Suggested suppliers:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"The medicines can only be bought from the physician Sh. Anandaiah himself, in the coastal village Krishnapatnam of AP. Distance deliveries are undertaken by post, and the medications should be consumed within 15 days of arrival. They are sent in a dry and powdery form and should not be refrigerated.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('Contact, Jayana Rama Govind:\n+91 9440170522"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "further-references-3" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#further-references-3" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Further references:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"AP government gives nod to use of traditional medicine prepared by Ayurveda doctor'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Move over Coronil, AP villagers ditch masks, vaccine after 'miracle drug', Jagan govt backs it: Herbal concoction by Krishnapatnam resident Anandaiah ‘isn’t Ayurvedic medicine, can’t cure Covid’, say officials; Andhra MLA says govt could restart distribution of the mix"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "No objection to use of 'Krishnapatnam medicine': Andhra Pradesh government; May 23, 2021\""
        ),
      ]),
      _vm._v(" "),
      _c(
        "h2",
        {
          attrs: {
            id: "_4-patanjali-s-divya-swasari-coronil-kit-with-coronil-containing-two-bottles-1-each-of-divya-swasari-vati-and-divya-coronil-tablets-with-giloy-ashwagandha-and-tulasi-in-2-1-1-mixture-and-anu-taila",
          },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#_4-patanjali-s-divya-swasari-coronil-kit-with-coronil-containing-two-bottles-1-each-of-divya-swasari-vati-and-divya-coronil-tablets-with-giloy-ashwagandha-and-tulasi-in-2-1-1-mixture-and-anu-taila",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            " 4. Patanjali's Divya Swasari Coronil kit with Coronil, containing two bottles, 1 each of Divya Swasari Vati and Divya Coronil tablets (with Giloy, Ashwagandha and Tulasi in 2:1:1 mixture) and Anu taila"
          ),
        ]
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objective-4" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objective-4" } },
          [_vm._v("#")]
        ),
        _vm._v(" Objective:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Prophylactic and curative")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "system-4" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#system-4" } },
          [_vm._v("#")]
        ),
        _vm._v(" System:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Ayurveda (Patanjali)")]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: { id: "can-be-used-alongside-other-allopathic-treatments-4" },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-be-used-alongside-other-allopathic-treatments-4",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(" Can be used alongside other allopathic treatments:"),
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Yes, alongside non-Ayurvedic prophylactic treatments")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "status-of-authorisation-4" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#status-of-authorisation-4" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Status of authorisation:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Unclear, but popularly bought and used here; sold in lakhs in India during the "first wave" in 2020. The kit says that the Divya Coronil tablets have been formulated in compliance with the clinical research conducted on the active components of the herbs used, and incorporating medical dosages prescribed by Ayurvedic scriptures.'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocol-and-treatment-approach-4" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocol-and-treatment-approach-4" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Protocol and treatment approach:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"As specified in the Divya Corona Kit of Patanjali:')]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _vm._v(
            "Take 2 tablets of Divya Swasari each, with lukewarm water, half an hour before breakfast, lunch and dinner."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Take 2 tablets of Divya Coronil each, with lukewarm water, half an hour after breakfast, lunch and dinner."
          ),
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Put 4 drops of Anu Taila each in both nostrils 1 hour before breakfast."
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'The above dosage is suitable for the age group 15-60 years, and for children between the ages 6-15 years, half of this dosage is recommended."'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "typical-duration-of-treatment-4" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#typical-duration-of-treatment-4" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Typical duration of treatment:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("5-14 days, when used in early stages of disease.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "outcome-4" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#outcome-4" } },
          [_vm._v("#")]
        ),
        _vm._v(" Outcome:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Stated by manufacturer and Yoga guru Baba Ramdev to promise 100% cure, based on their successful clinical trials, for which evidence was submitted to Ayush, cited in the reference."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "significant-side-effects-4" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#significant-side-effects-4" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Significant side effects:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("None known or reported.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "recommended-quantity-for-stocking-4" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#recommended-quantity-for-stocking-4" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Recommended quantity for stocking:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "If Patanjali's Coronil kit is adopted as the primary line of prophylaxis, then recommended to buy one kit per person in the family."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "price-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#price-4" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Price:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Rs. 545/- per kit, containing 200 tablets (100 tablets each of Coronil and Swasari Vati) and the Anu thailam."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "suggested-suppliers-4" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#suggested-suppliers-4" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Suggested suppliers:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"Patanjali stores and online suppliers')]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "further-references-4" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#further-references-4" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Further references:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"researchgate.net: AN OVERVIEW ON CORONIL DRUG; Tiwari & Talreja; July, 2020'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Randomized placebo-controlled pilot clinical trial on the efficacy of ayurvedic treatment regime on COVID-19 positive patients; Ganpat Devpura et al.; Phytomedicine; April, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A number of news meda platforms, including TNIE, Alt News, The Quint, The Print, Wired, and others, have joined the campaign against this commercial Covid therapy from Patanjali, even though the product and the tri-herbal formulation (Giloy, Tulasi and Ashwagandha) used in it have since been ratified by the AYUSH Ministry. Furthermore, many have reported benefit from this product, and the treatment is largely substantiated by early clinical trials, and now a Randomized Controlled Trial."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Influence of Patient-Reported Treatment Satisfaction on Psychological Health and Quality of Life Among Patients Receiving Divya-Swasari-Coronil-Kit Against COVID-19: Findings from a Cross-Sectional ""SATISFACTION COVID"" Survey; Acharya Balkrishna; Patient Preference and Adherence; April 29, 2021'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Coronil, a Tri-Herbal Formulation, Attenuates Spike-Protein-Mediated SARS-CoV-2 Viral Entry into Human Alveolar Epithelial Cells and Pro-Inflammatory Cytokines Production by Inhibiting Spike Protein-ACE-2 Interaction; Balkrishna A; Journal of Inflammation Research; Dec 19, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Can Ayurveda cure Covid?")]),
      _vm._v(" "),
      _c("p", [_vm._v("Patanjali Research Against COVID-19")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "dnaindia.com: '100% fulfilled all clinical trials': Patanjali on Coronil details conveyed to Centre-\nThe Centre on Tuesday said it has taken cognizance of the reports of an Ayurvedic medicine manufactured by Patanjali, which the company claims can cure COVID-19."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "indiatvnews.com: How Patanjali's Coronil will cure coronavirus patients in 14 days?; Shriya Bhasin; June 23, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Dr. Yashwant Chowdhury: An informal, informed perspective on the objections raised to Coronil; June 24, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "_5-ayush-kwath-churna" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#_5-ayush-kwath-churna" },
          },
          [_vm._v("#")]
        ),
        _vm._v(' 5. "Ayush Kwath Churna:'),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("(Tulsi / Holy Basil / Ocimum sanctum,")]),
      _vm._v(" "),
      _c("p", [_vm._v("Dalchini / Cinnamon / Cinnamomum zeylanicum,")]),
      _vm._v(" "),
      _c("p", [_vm._v("Sunthi / Ginger / Zingiber officinale and")]),
      _vm._v(" "),
      _c("p", [_vm._v('Marich / Black Pepper / Piper nigrum)"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objective-5" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objective-5" } },
          [_vm._v("#")]
        ),
        _vm._v(" Objective:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Supporting and enhancing immunity. Primarily prophylactic."),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "system-5" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#system-5" } },
          [_vm._v("#")]
        ),
        _vm._v(" System:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Ayurveda")]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: { id: "can-be-used-alongside-other-allopathic-treatments-5" },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-be-used-alongside-other-allopathic-treatments-5",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(" Can be used alongside other allopathic treatments:"),
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Yes, alongside non-Ayurvedic prophylactic treatments")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "status-of-authorisation-5" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#status-of-authorisation-5" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Status of authorisation:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Kottakkal, situated in Kerala, is one of the most traditional and reputed centres of traditional and hereditary Ayurvedic treatment in India.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The Ministry of AYUSH (Ayurveda, Yoga & Naturopathy, Unani, Siddha and Homeopathy) recommended the public to use a herbal decoction as an immunity-enhancing measure against the novel coronavirus in April, 2020. The ministry claimed that ‘AYUSH KWATH’ formulation can help boost the immune system, the body’s first line of defense against bacteria and viruses. The AYUSH ministry, in a letter referenced here, directed states and union territories to start commercial production of the herbal formulation claiming that it enhances immunity. Prime Minister Narendra Modi, while addressing the nation on lockdown, had recommended the use of alternative medicine as suggested by the AYUSH ministry to boost immunity."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Nonetheless, conventional medicine has not recognized the value of such formulations, citing lack of research studies."'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocol-and-treatment-approach-5" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocol-and-treatment-approach-5" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Protocol and treatment approach:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"AYUSH KWATH is a combination of four medicinal herbs commonly used in every Indian kitchen - basil leaves (tulsi), cinnamon bark (dalchini), Zingiber officinale (sunthi), and krishna marich (Piper nigrum).'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Mix 3 g of the Churnam in 150 ml of freshly boiled water. Let it remain for 5 minutes. Strain and take once or twice daily. Jaggery / lemon juice can be added for flavour. This is the recommended dosage for adults only. Drink 1-2 cups of the tea daily."'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "typical-duration-of-treatment-5" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#typical-duration-of-treatment-5" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Typical duration of treatment:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Can be consumed regularly, like herbal teas.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "outcome-5" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#outcome-5" } },
          [_vm._v("#")]
        ),
        _vm._v(" Outcome:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Based on the traditional understanding of the properties of these herbs, it is expected that the immune-modulatory, antiviral, anti-oxidant, anti-inflammatory, anti-platelet, anti-atherosclerotic, hepato-protective, reno-protective properties of the herbs in the preparation would be safe and effective in immuno-regulation for controlling viral infections like COVID-19."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "significant-side-effects-5" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#significant-side-effects-5" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Significant side effects:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("This is a traditional treatment with no known side effects."),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "recommended-quantity-for-stocking-5" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#recommended-quantity-for-stocking-5" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Recommended quantity for stocking:"),
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("VACANT")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "price-5" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#price-5" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Price:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("INR 150 for one bottle.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "suggested-suppliers-5" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#suggested-suppliers-5" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Suggested suppliers:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Kottakkal Arya Vaidya Sala and other trusted stores selling herbal medicine'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'The formulation may be manufactured and sold in generic name as ‘Ayush Kwath’ or ‘Ayush\nKudineer’ or ‘Ayush Joshanda’."'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "further-references-5" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#further-references-5" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Further references:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"COVID-19: AYUSH Ministry recommends taking ‘AYUSH KWATH’ formulation to enhance immunity; Know the recipe; April, 2020'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "‘Ayush health promotion product’ for commercial manufacturing by Ayurveda, Siddha and Unani drug manufacturers; Letter to the States and Union Territories from AYUSH Ministry, dated April 24, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Immunity against COVID-19: Potential role of Ayush Kwath; Shankar Gautam, Arun Gautam et al.; Journal of Ayurveda and Integrative Medicine; Aug 17, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Herbal plants as immunity modulators against COVID-19: A primary preventive measure during home quarantine; Kuntal Das; Journal of Herbal Medicine; Aug 5, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c(
        "h2",
        {
          attrs: {
            id: "_6-dr-swapna-reddy-s-md-ayurveda-clinically-proven-treatment-protocol",
          },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#_6-dr-swapna-reddy-s-md-ayurveda-clinically-proven-treatment-protocol",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            " 6. Dr. Swapna Reddy's (MD (Ayurveda)) clinically proven treatment protocol"
          ),
        ]
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objective-6" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objective-6" } },
          [_vm._v("#")]
        ),
        _vm._v(" Objective:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The treatment of mild or even very severe Covid-19 infections in very short durations"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "system-6" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#system-6" } },
          [_vm._v("#")]
        ),
        _vm._v(" System:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Ayurveda adn Panchakarma therapy")]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: { id: "can-be-used-alongside-other-allopathic-treatments-6" },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-be-used-alongside-other-allopathic-treatments-6",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(" Can be used alongside other allopathic treatments:"),
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Recommended to be used exclusively, not alongside allopathic treatments"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "status-of-authorisation-6" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#status-of-authorisation-6" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Status of authorisation:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Dr. Swapna Reddy established the Siddha Nagarjuna Ayurveda Clinic in Hyderabad and has been practising Ayurveda for 19-20 years.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The treatment is reported to have been effectively used to mitigate even infections in the last and critical stages, and proven clinically with over 300 patients including the doctor's own father and critically ill mother in Dr. Swapna Reddy's Ayurveda and Panchakarma clinic in Hyderabad. Dr. Reddy is an academically accomplished gold medallist in MD (Ayurveda) from Gujarat Ayurved University, specialized in Ayurvedic pharmacology and the treatment of end-stage illnesses through Panchakarma therapy in Ayurveda, and a certified Isha Hatha Yoga Teacher."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Over 300 patients have recovered from Covid-19 through Dr. Swapna Reddy's care, and have no side effects from the treatment. A few have acknowledged the efficacy of the cures in social media video testimonies. Among these, there were patients whose conditions were so critical that the doctor believes that they are unlikely to have survived through Standard Of Care therapy, as they may not have been able to withstand potent drugs.\""
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocol-and-treatment-approach-6" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocol-and-treatment-approach-6" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Protocol and treatment approach:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "\"\nDr. Swapna Reddy's Ayurvedic preventive therapy for Covid-19:"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ayurveda has a three-pronged approach to prevention and cure, namely, Aahaaram (Food), Vihaaram (Lifestyle) and Oushadham (Medicine)."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In Aahaaram or diet, it is important to eat freshly cooked and natural foods, and minimize foods that aggravate Kapha dosha, especially if the body is resistng an infection. When one is healthy, one can eat all fresh fruits and vegetables and freshly cooked food. Dairy products too can be consumed. It is important to consume foods that are rich in Praana or life energy, life-giving foods. (Here's, for quick reference, a list of some Positive, Negative and Neutral Praanic foods, according to Ayurveda. It is said that winter or ash gourd, or white pumpkin, is a food with the highest Praanic quality, and its juice drunk on an empty stomach in the morning is extremely vitalizing for the body.)"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "However, as soon as there are symptoms of Kapha (mucous), such as a runny nose or cough or mucal congestion in the chest, it is important to stop consuming all foods that aggravate Kapha, including fruits, raw vegetables and all dairy products. Here is a brief description of the Kapha Dosha (Kapha imbalance), according to Ayurveda, and its dietary and lifestyle remedies."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "How to mitigate Kapha dosha in the body (i.e., dietary prescription for mitigating cold, cough and other respiratory ailments):\nTo reduce Kapha, avoid cold food, fruits, sweets, chocolates, refined and processed foods, milk and all dairy products, stored foods, and even sometimes, certain raw vegetables, which are all linked with aggravation of Kapha. The exceptions are turmeric milk with ginger / cardamom / black pepper. This is the Pathya or dietary regimen for Kapha mitigation in a patient with excessive Kapha, and the food for another individual physiological Prakrti may be different from that prescribed for a patient with Kapha imbalance. A good thumb rule with respect to diet may be to know the effect of a food on Kapha by observing the effect of consuming it on the body."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It is beneficial to add the following Oushadha or medicinal herbs and spices to the diet as Kashayas or herbal decoctions:\nTurmeric, Cinnamon, Cardamon, Dry ginger powder (Sonti / Chukku), Black pepper, Tulasi / Holy basil, Pippali / Indian long pepper"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "With respect to Vihaaram or lifestyle, it is important not to be stressed, and to be religious about Yoga, Pranayama and meditation or Dhyaana. It is important to be peaceful and happy, which is the primary necessity for a healthy body and a strong immune system."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Isha Yoga and Hatha Yoga:\nDr. Swapna Reddy avows the great value of Isha Hatha Yoga and Simha Kriya to maintain the health of the immune system and the respiratory system. Isha Simha kriya, performed regularly 3 times a day, increases lung capacity and keeps the blood oxygen levels high. Isha kriya, performed regularly, makes the mind peaceful and stress-free and thus promotes immune health. The physician has observed with her patients that even those who have not been trained in Yoga and Pranayama would benefit adequately from regular practice of these Kriyas. Isha Kriya assists the mind to reduce depression and anxiety and to develop detachment in life. Simha Kriya helps to increase lung capacity, and is seen to increase oxygen saturation in the blood (as measured with an oxymeter) by even 5 %.\nTutorial page and video for Isha Yoga's Simha Kriya,\nIsha Kriya- Free Online Guided Meditation\nIsha Kriya Instructions- English (PDF)"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Medicinal incense or Dhoopam:\nAlso, with respect to lifestyle or Viharam, Ayurveda recommends to purefy the living environment and discourage proliferation of pathogens by fumigating the home twice daily, in the morning and evening, with Dhoopams or incenses like Patanjali Aastha Dasanga Powder or Aparajitha Dhooma Choornam, or if these are not available, then Sambrani Dhoopam or simply fumigating by placing Neem leaves on burning coal."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Steam inhalation with medicinal oils:\nAs a preventative measure, and especially after suspected exposure, it is recommended to use Halin Drops in steam inhalation. During steam inhalation, inhale through the nose and exhale through the mouth, and vice versa, alternately. This remedy would help to clear the virus from the nose, mouth and respiratory tract, where it is said to reside for 4-5 days before progressing to an infection. For those who are occupationally exposed to the pathogen, it might be a good idea to inhale steam before entering the home, by installing a steamer in the front room."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Oushadham:\nAyurveda and Hatha yoga place great emphasis on boosting immunity. There are a great variety of immunoboosters in Ayurveda, and prominent among them are Ashwagandha, Guduchi / Giloy / Amrutha, Mahasudarsana kadha / Mahasudarsana ghana vati, Mahasudarsana choornam, Guduchi satvam, Godanti bhasma etc. When these medications are used, along with the adoption of an Ayurvedic lifestyle and yogic practices (such as Isha hatha yoga and Simha kriya), the body will not succumb to Covid-19."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ayurvedic medicine for prophylaxis after exposure and early treatment:"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "For prevention, procure, measure and mix together the following medications in the given proportions into one powder:"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "WARNING: This therapy should only be taken strictly under medical supervision, and are not recmomended for self-medication as overdosage of some components could lead to serious side effects. It is best avoided during pregnancy and in infants. Lactating mothers and children may follow the prescription in low doses but strictly under medical supervision."
        ),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [
          _c("p", [
            _vm._v(
              "Mahasudarshana Choornam 100 g, containing Guduchi / Tinospora cordifolia / Giloy / Amritavalli, Kiratatikta / Swertia chirata / Nilavembu / Chiretta, Musta / Cyperus rotundus / Koari kizhangu / Muttanjga / Tunge gadde / Nut or Coco or Java grass, Neem / Azadirachta indica / Veppu, Shunthi / Zingiber officinale / Chukku / Dried ginger"
            ),
          ]),
        ]),
        _vm._v(" "),
        _c("li", [_c("p", [_vm._v("Guduchi / Giloy Satvam 50 g")])]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _vm._v(
              "Godanti Bhasmam 10 g, containing Godanti patthar / Gypsum, Ghritkumari Swaras / Aloevera juice, Nimbu / lemon"
            ),
          ]),
        ]),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Take 3 g of this mixture and mix it with honey to prepare balls. Take 1.5 g or half the prepared quantity in the morning, and the remaining 1.5 g in the evening, 30 minutes before meals. Before going to bed, have Triphala Choornam."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ayurvedic remedies for advanced Covid symptoms:\nAdvanced Covid-19 symptoms can be treated effectively and efficiently by competent Ayurvedic physicians, but the treatment must be customized to the patient's physiology and exact symptoms. It is probably for this reason that the AYUSH Ministry has refrained from recommending therapies to treat advanced infection. The treatment of aggravated symptoms in Ayurveda makes use of metallomineral compounds that cannot be widely prescribed to the general public. Therefore it is recommended to consult with a competent nearby Ayurvedic physician in such cases."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Antibiotics and Immunosuppressants:\nAntibiotics are inadvisable as they kill the microbiota in the human system, and thereby decrease the life force within the body. Corticosteroids, antihistamines and many other anti-inflammatory drugs act by suppressing the body's natural immunity, and like antibiotics, these carry the risk of adverse effects and leave the body vulnerable to other diseases. Thus the body is saved from the immediate crisis at the expense of the holistic health of the body."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ayurveda, on the other hand, changes the medium of the body to make it inhospitable for pathogens, thereby suppressing the disease, while being supportive of the body's own probiotic and immune health. Therefore Ayurveda and traditional and natural medicines are always preferable to allopathic therapies, which should be used only as a last resort."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Background on the treatment approach adopted in the Ayurvedic sciences:\nDr. Swapna Reddy affirms that there are a very large number of cures in Ayurveda fro Covid, because Ayurveda is a holistic science that seeks to address the particular deficiencies or Dosha imbalance of the individual patient through a customized treatment protocol, rather than address the particular pathogen that has precipitated the symptoms. Patients thus emerge stronger than they were before the treatment, as opposed to mainstream or allopathic treatment protocols, where the side effects of the treatment themselves occasionally cause death or prolonged symptoms. Covid, in generally, is observed to attack the weakest organ system of the patient, and therefore there are a wide range of herbal medications that may need to be applied on a case-by-case basis. A correctly designed treatment protocol is found, in fact, to comprehensively treat all underlying conditions of the patient in addition to the SARS-CoV-2. For example, Aswagandha treatment for stress is found to also treat Covid symptoms. There is such a wide range of potential treatment protocols that every physician who has developed their own successful therapeutic strategies for Covid is likely to be using a uniquely different approache. In reality, SARS-CoV-2 is not deemed by learned Ayurveda and traditional physicians to be a difficult infection to treat, as even with no treatment, about 90 % of patients recover, but the typical manifestation of Covid is somewhat stronger than the typical flu infection."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "However there are also a general treatment protocol and diet, which are 90 % successful and explained in the instructional videos released by Dr. Reddy. There are also treatments in Ayurveda for the vaccine injuries, which are highly effective."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Comparison of the Ayurvedic and allopathic approach to treating Covid:\nThe allopathic approach relies heavily on the use of corticosteroids, antihistamines and other substances to suppress the immune system, thereby mitigating the inflammatory response that is fatal in so many vulnerable Covid-19 patients. Allopathic therapy also relies on the use of antibiotics like Doxycycline and Azithromycin for their antiviral and antibiotic effect. However these chemicals also harm the body and are not, ultimately, life-giving. Instead, they suppress the body's own healing potential, one way or another, even if the Covid is effectively cured, and this leaves the body subsequently susceptible to other diseases and afflictions."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In Ayurveda, the Nadi method of diagnosis and symptomatic diagnosis are used to decide upon the right herbal medication, which are used to change the 'medium' within the body to make it inhospitable to the virus. At the same time, the organs in the body are not affected by the changed medium,.Thus Ayurveda and allopathy work in mutually contradictory ways."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Therefore it is important that when Ayurvedic medicines are used, allopathic medications should be avoided."'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "typical-duration-of-treatment-6" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#typical-duration-of-treatment-6" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Typical duration of treatment:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The treatment has been demonstrated to yield rapid results, with even an instance of the doctor's own mother, who was severely ill and nearly unconscious with Covid-19, and who had suffered from severe underlying medical conditions, recovering rapidly and regaining appetite in a matter of a few hours."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "outcome-6" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#outcome-6" } },
          [_vm._v("#")]
        ),
        _vm._v(" Outcome:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "\"Very good results, and rapid recovery from infection observed with the therapy, and reportedly demonstrated to be effective in curing 100 percent of over 300 cases in the physician's clinic."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Dr. Swapna Reddy also cites, from her clinical experience, that Ayurveda offers excellent methods for prevention of Covid-19."'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "significant-side-effects-6" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#significant-side-effects-6" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Significant side effects:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Dr. Reddy explains that Ayurvedic treatments inhibit viral replication in the body with increased immunity and in large part, with no adverse effects. However, some components of the present protocol, chiefly Godanti Bhasma, can have significant adverse effects if overdosed. Moreover, pregnant or lactating woman, infants and children may be advised not to take certain medications, or use them in a lower dosage. Therefore it is best not to self-medicate but to adopt this treatment strictly under medical supervision.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Godanti Bhasma- Benefits, Dosage, Ingredients, Side Effects\n"'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "recommended-quantity-for-stocking-6" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#recommended-quantity-for-stocking-6" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Recommended quantity for stocking:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Sufficient quantity for use in prophylaxing after exposure, not necessarily for regular use.'
        ),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [_vm._v("Halin drops")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Patanjali Dasanga Dhoopam / Aparajitha Dhoopa Choorna / Sambrani Dhoopam"
          ),
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Mahasudarsana Choornam 100 g")]),
        _vm._v(" "),
        _c("li", [_vm._v("Guduchi or Giloy Satva 50 g")]),
        _vm._v(" "),
        _c("li", [_vm._v("Godanti Bhasma 10 g")]),
        _vm._v(" "),
        _c("li", [_vm._v("Triphala Choornam")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            'Indian herbs and spices, to be used in cooking:\nTurmeric, Cinnamon, Cardamon, Dry ginger powder (Sonti / Chukku), Black pepper, Tulasi / Holy basil, Pippali / Indian long pepper\n"'
          ),
        ]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "price-6" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#price-6" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Price:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Total cost of approx. INR 1400 for all the recommended medicines online."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "suggested-suppliers-6" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#suggested-suppliers-6" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Suggested suppliers:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"For online consultation with Dr. S. Swapna Reddy, MD (Ayurveda) and Isha Hatha Yoga Teacher, contact +91 8985738271, or drswapnareddy@gmail.com.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Medicines can be procured from reputed Ayurveda pharmacies like Kottakkal Arya Vaidya Saala's outlets across India and online."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Prescribed therapeutic products for prophylactic and early treatment:"
        ),
      ]),
      _vm._v(" "),
      _c("ol", [
        _c("li", [_vm._v("Halin drops 50 drop-capsules (INR 265)")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Patanjali Dasanga Dhoopam 100 g (INR 80) / Aparajitha Dhoopa Choorna 50 g (INR 55) / Sambrani Dhoopam 20 pcs (INR 24)"
          ),
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Mahasudarsana Churnam 100 g (INR 185)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Guduchi or Giloy Satva 50 g (INR 185 - 240)")]),
        _vm._v(" "),
        _c("li", [_vm._v("Godanti Bhasma 10 g (INR 300)")]),
        _vm._v(" "),
        _c("li", [_vm._v('Triphala Churnam 100 g (INR 350)\n"')]),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "further-references-6" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#further-references-6" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Further references:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Dr. Swapna Reddy shares how Ayurveda and Yoga can boost Immunity during these challenging times'
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Isha Yoga's Simha Kriya")]),
      _vm._v(" "),
      _c("p", [_vm._v("Isha Kriya- Free Online Guided Meditation")]),
      _vm._v(" "),
      _c("p", [_vm._v("Isha Kriya Instructions- English (PDF)")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "healthline.com- Pranic Foods: Types, History, Evidence and More"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "healthline.com: What is the Ayurvedic Diet?: Benefits, Downsides, and More"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "healthline.com: What Are the Ayurvedic Doshas?- Vata, Pitta and Kapha Explained"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Somatheeram Ayurvedic Health Resort: The Kapha Quality or Prakrti in Ayurveda- Diet, Tips, Characteristics etc."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Halin drops: Benefits, How to Use, Ingredients, Side Effects"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "ToI: Turmeric, neem effective against coronavirus, says KGMU study; Yusra Husain; July, 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("en.wikipedia.org: Nasya")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "TNIE: Kerala’s ayurvedic fumigant receives national attention; Dinesh Kallungal; May 21, 2020\nOushadhi — an ayurvedic medicine manufacturing unit — had recently recommended the Ayush Ministry to use the fumigant in isolation wards and quarantine centres."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "pharmascope.org: Review on Role of Dhoopan in the prevention of airborne infections (COVID-19); Rathi et al."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Microbial growth inhibition by aparajitha dhooma choornam; Cinela Celine; Ancient Science of Life; Jan, 2007"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c(
        "h2",
        {
          attrs: {
            id: "_7-prof-dileep-kumar-s-phd-ayurveda-pharmacology-recommended-protocol-for-covid-19-aiard",
          },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#_7-prof-dileep-kumar-s-phd-ayurveda-pharmacology-recommended-protocol-for-covid-19-aiard",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            " 7. Prof. Dileep Kumar's (PhD, Ayurveda Pharmacology) recommended protocol for Covid-19, AIARD"
          ),
        ]
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objective-7" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objective-7" } },
          [_vm._v("#")]
        ),
        _vm._v(" Objective:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Treatment to prevent cytokine storm in Covid-19 and SPO2 level maintenance. To be only taken by people who have symptoms; it does not matter whether they test positive or not. It is not a preventative medicine."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "system-7" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#system-7" } },
          [_vm._v("#")]
        ),
        _vm._v(" System:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Ayurveda")]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: { id: "can-be-used-alongside-other-allopathic-treatments-7" },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-be-used-alongside-other-allopathic-treatments-7",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(" Can be used alongside other allopathic treatments:"),
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Recommended to be used exclusively, before commencing or after stopping allopathic medication"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "status-of-authorisation-7" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#status-of-authorisation-7" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Status of authorisation:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Sourced from an official video documenting expert guidance from Prof. Dr. Dileep Kumar P. P., MD, PhD (Dravyaguna), Ayurveda Pharmacology, Ambuja Institute of Ayurvedic Research and Documentation, Udayamperoor P.O., Ernakulam, Kerala, Prepared for SIIMSAR Doctors School of Swasthavritta (Social and Preventative Medicine), Navi Mumbai"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocol-and-treatment-approach-7" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocol-and-treatment-approach-7" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Protocol and treatment approach:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Ingredients: 2 pieces of shallots or small onions, 2 star anise, 20 black pepper, 4 tsp coriander seeds, 1/2 tsp fenugreek seeds, 1/2 tsp turmeric powder,'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Preparation and dosage: Coarsely crush and add these six ingredients to 2 glasses of water, boil and reduce it to 1 glass of the decoction. Filter the decoction and drink it piping hot 3 times a day, freshly prepared for 5 days."'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "typical-duration-of-treatment-7" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#typical-duration-of-treatment-7" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Typical duration of treatment:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("5 days")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "outcome-7" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#outcome-7" } },
          [_vm._v("#")]
        ),
        _vm._v(" Outcome:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Treatment of Covid-19, including prevention of cytokine storm and SPO2 level maintenance in symptomatic patients who are not on allopathic medication."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "significant-side-effects-7" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#significant-side-effects-7" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Significant side effects:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("None known, natural remedy")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "recommended-quantity-for-stocking-7" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#recommended-quantity-for-stocking-7" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Recommended quantity for stocking:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "1/2 kg shallots, 250 g star anise, 200 g black pepper, 250 g coriander seeds, 200 g fenugreek seeds, 100 g gram organic turmeric powder"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "price-7" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#price-7" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Price:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Common Indian kitchen ingredients")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "suggested-suppliers-7" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#suggested-suppliers-7" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Suggested suppliers:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Local grocery stores")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "further-references-7" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#further-references-7" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Further references:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Sourced from an official video documenting expert guidance from Prof. Dr. Dileep Kumar P. P., MD, PhD (Dravyaguna), Ayurveda Pharmacology, Ambuja Institute of Ayurvedic Research and Documentation, Udayamperoor P.O., Ernakulam, Kerala, Prepared for SIIMSAR Doctors School of Swasthavritta (Social and Preventative Medicine), Navi Mumbai"
        ),
      ]),
      _vm._v(" "),
      _c(
        "h2",
        {
          attrs: {
            id: "_8-camphor-ajwain-carom-seeds-lavang-cloves-eucalyptus-oil-aromatic-pouch-potli-for-inhalation",
          },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#_8-camphor-ajwain-carom-seeds-lavang-cloves-eucalyptus-oil-aromatic-pouch-potli-for-inhalation",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            " 8. Camphor + Ajwain / Carom seeds + Lavang / Cloves + Eucalyptus oil aromatic pouch / Potli for inhalation"
          ),
        ]
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objective-8" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objective-8" } },
          [_vm._v("#")]
        ),
        _vm._v(" Objective:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Relief from respiratory congestion and breathing difficulty, and increase blood oxygenation"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "system-8" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#system-8" } },
          [_vm._v("#")]
        ),
        _vm._v(" System:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Traditional medicine, recommended also by naturopaths"),
      ]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: { id: "can-be-used-alongside-other-allopathic-treatments-8" },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-be-used-alongside-other-allopathic-treatments-8",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(" Can be used alongside other allopathic treatments:"),
        ]
      ),
      _vm._v(" "),
      _c("p", [_vm._v("Yes.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "status-of-authorisation-8" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#status-of-authorisation-8" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Status of authorisation:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Among the remedies documented here, this remedy may be the least supported by mainstream research evidence, as there are several fact-checking articles online ""debunking the myth"", such as this article, which nonetheless admits that camphor constitutes 4.8 % of the common decongestant and cough mitigant Vicks VapoRub:\nThe Federal: Beware: Camphor doesn’t help improve body’s oxygen level, it can be toxic; May 5, 2021'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Dr. Prakash Gyawali, an Ayurvedic physician, explains that Camphor helps to open the nasal passages in case of cold while Cloves dry the phlegm, Eucalyptus oil is a nasal decongestant and Carom seeds / Ajwain are used in many Ayurvedic medicines for their expectorant and drying properties. However, he too believes that the claim that they increase oxygen saturation in blood is not well-founded in existing research:\nSouth Asia Check | Fact Check: A supposed home remedy for boosting blood oxygen levels is unfounded; Deepak Adhikari; April 29, 2021"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "It has also been reported that anosmia or loss of taste and smell, one of the common and peculiar symptoms of Covid-19, especially in the first wave and earlier variants, attributed also to vitamin D deficiency and Zinc deficiency, can be reversed through steam inhalation with eucalyptus oil. Ajwain has been known to have a bronchodilatory effect and be useful in the treatment of asthma:\nBronchodilatory Effect of Carum copticum in Airways of Asthmatic Patients; Mohammad Hossein Boskabady et al.; Therapie; Jan, 2007"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Anti-inflammatory activity of 1.8-cineol (eucalyptol) in bronchial asthma: a double-blind placebo-controlled trial; U R Juergens et al.; Respiratory Medicine; Mar, 2003"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In fact, Carom seeds (active agents, thymol oil, terpine and linonene) and Eucalyptus oil (active agents, cineole and eucalyptol) are often prescribed in traditional home remedies to combat shortness of breath, especially for those suffering from asthma, where it is recommended that the oil of Eucalyptus be added to hot water for steam inhalation or that Carom seeds be slightly roasted to release the vapours that are sniffed to dilate the bronchial passages."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "In this video, the well-known Ayurveda and Yoga physician and spiritual teacher Dr. Balaji Tambe, prescribes the Camphor + Ajwain + Abhyang oil Potli for those suffering from hypoxia and breathing difficulty, and mentions the customary use of this breathing aid by unaccustomed travellers to higher altitudes like Amarnath or Badrinath or Ladakh in the Himalayas. Acharya Tambe recommended that the chest be massaged with the Ayurvedic medicated oil Abhyang before the inhalation of vapours from the Ajwain-Camphor Potli, containing mostly Ajwain and only a pinch of pure camphor. It should be noted that the camphor used should prefefrably be natural camphor (obtained from a tree bark) very pure and is the more expensive, expensive variety, which is not toxic even if ingested in very small quantities (whereas synthetic camphor is inexpensive, and manufactured from oil of turpentine):\nShreeguru Dr. Balaji Tambe: Camphor-Ajwain for Breath; 2020"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "There is also much anecdotal evidence from clinicians and patients who have used the technique to mitigate breathing difficulty in Covid-19 patients. Ayurvedic Breathe Easy Potli is a commercial product that uses this technique to alleviate cough, respiratory distress and improve overall respiratory health and immunity."
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocol-and-treatment-approach-8" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocol-and-treatment-approach-8" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Protocol and treatment approach:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "A pinch of camphor, a spoon of Ajwain / Carom seeds (perhaps roasted to release more vapours), Lavang / Clove, a few drops of Eucalyptus oil, mixed and tied together in a cotton Potli / Kizhi or small pouch, and sniffed in 10-15 deep breaths every 1-2 hours. This treatment can be preceded by a topical massage of the chest with Ayurvedic Abhyang oil."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "typical-duration-of-treatment-8" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#typical-duration-of-treatment-8" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Typical duration of treatment:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("About 24 hours")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "outcome-8" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#outcome-8" } },
          [_vm._v("#")]
        ),
        _vm._v(" Outcome:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Patients who have used the Potli therapy report immediate symptomatic relief."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "significant-side-effects-8" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#significant-side-effects-8" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Significant side effects:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "None known. Camphor, even the natural variety, is known to be toxic if ingested in large quantities. All therapeutic medicines can be toxic if consumed in immoderate amounts."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "recommended-quantity-for-stocking-8" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#recommended-quantity-for-stocking-8" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Recommended quantity for stocking:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Household supplies, 1-2 packets of pure natural Camphor and about 200g Ajwain."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "price-8" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#price-8" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Price:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Ordinary household commodities could be used to make this home remedy.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "suggested-suppliers-8" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#suggested-suppliers-8" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Suggested suppliers:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Local grocery or supermarket")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "further-references-8" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#further-references-8" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Further references:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"A great deal of anecdotal evidence from clinicians, such as cardiologist Dr. Shilpa Dane\'s video testimony. For example, ""Sharing an Incident that happened with Mr. Pramod Malkan. His daughter-in-law was tested positive for Covid and oxygen level went down to 80-85 and immediate hospitalization was recommended. Being skeptical abt the treatments at hospitals, Mr. Pramod decided to use a home remedy instead. He mixed a cube of camphor with a spoon of carom seeds and tied it in a piece of cotton cloth. He then made her smell it 10-15 times with deep breaths and repeat the same action every two hours. Within 24 hrs her oxygen level went to 98-99 without any hospitalization. After this, he helped one of his friends who was hospitalized for covid with the same remedy and as a result, his friend was released from the hospital. Carom seeds is - ajwain अजवाइन (ओवा)""'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Reported to be stocked in ambulances, used to reoxygenate climbers and travellers in high altitude pilgrimage centers like Badrinath and Amarnath, and other Himalayan heights like Ladakh."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Ayurveda Acharya Dr. Balaji Tambe: Camphor-Ajwain for Breath"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'A few other (indirect) references from research are cited in the ""Status of Authorization"" section.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c(
        "h2",
        {
          attrs: {
            id: "_9-haldi-30-therapy-using-a-superactive-extract-of-haldi-turmeric-in-sesame-oil",
          },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#_9-haldi-30-therapy-using-a-superactive-extract-of-haldi-turmeric-in-sesame-oil",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(
            ' 9. Haldi-30 Therapy, using a "superactive extract" of Haldi / Turmeric in Sesame oil'
          ),
        ]
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objective-9" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objective-9" } },
          [_vm._v("#")]
        ),
        _vm._v(" Objective:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "The mitigation of Covid-19 in mild, moderate and advanced stages of the disease"
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "system-9" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#system-9" } },
          [_vm._v("#")]
        ),
        _vm._v(" System:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Ayurveda, Integrative medicine")]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: { id: "can-be-used-alongside-other-allopathic-treatments-9" },
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#can-be-used-alongside-other-allopathic-treatments-9",
              },
            },
            [_vm._v("#")]
          ),
          _vm._v(" Can be used alongside other allopathic treatments:"),
        ]
      ),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("VACANT")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "status-of-authorisation-9" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#status-of-authorisation-9" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Status of authorisation:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "\"The following webpage documents the journey of the therapy, developed through the innovations of Dr. S. G. Kane and Vaidya Sarang Phadke and being used effectively in the Vaidya's clinic for over 16 years.\nHaldi-30 Ayurvedic Superactive Extract"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Excerpt from the page:\nThe basic methodology for producing such an extremely bioactive extract of any herb was invented by Dr. S.G Kane, a chemical engineer and scientist who holds the worldwide process patent. Dr. Kane has invented this process for making extracts from any Ayurvedic herb, which results in creation of herb nano-particles in a low dose formulation that work at a deep cellular level. The further brainstorming and idea to use Turmeric super-active extract specifically for the coronavirus was Vaidya Sarang Phadke's own contribution, as was the specific dosage requirement in case of Covid-19. Vaidya Phadke came upon the dosage requirement – up to 5 times in a day – after researching several scientific studies which showed that frequent dosing is needed as Turmeric levels rapidly clear the bloodstream. Turmeric doesn’t work as effectively in any other form, but it works extremely well in this extract form because of the presence of bioactive nano-particles."
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'In Dr. Dravid\'s words:\n""I have made multiple attempts to reach out to the Central Government, mainly through the Ministry of Ayush, beginning first on August 15, 2020; I sent them a follow up reminder on the 20th of September. However, after receiving no response from Ayush, I made a complaint with the Prime Minister’s Grievance Cell, who did respond and forwarded my communication to Ayush, advising them to look into the matter.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '""Ayush sent my written clinical findings and data to the Central Council for Research in Ayurvedic Sciences to validate my claims. CCRAS further requested me to submit 45 case reports and I attended meetings with them over the course of two months. However, they later objected saying that after the patient recovery, I failed to have a repeat RTPCR test done proving the patients were negative. And so, they informed me, my claim was denied. This happened around January-February when the incidence of cases had declined, and so I didn’t bother further with the Ministry. But soon, March onward there was a sudden spike in cases again, and I sometimes would see as many as 15 Covid patients in a day. Again, I wrote back again to CCRAS, along with negative repeat test reports of the first 3 patients I had treated. I am also following up further with more cases with negative RTPCR test reports upon their recovery from my treatment.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '""If the Government decides to accept these finding as valid, the true advantage to this extract medicine is that it is proven safe and non-toxic, both by empirical use in our country over generations as food, as well as in my own 16 years of clinical practice. Among the 200 patients treated by me, only two had mild side-effects of oral ulcers, which were immediately managed with additional Ayurvedic medicines. These patients were able to complete their course of treatment with no further issues. Across all ages from young children to the elderly this medicine is very safe.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '""If this medicine were to be used on a mass scale, because we are seeing a tremendous spike in cases at present India, it would be of great benefit. Every single case I have treated was managed effectively at the upper respiratory tract level, without ever getting worse and entering the lungs and without needing hospitalization.Indeed, this approach would reduce the current heavy burden on our hospitals and assuredly reduce the number of severe cases progressing to deaths.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '""There are some pharmaceutical medicines now being used which have worked well such as Fabilu (Favipiravir), but they are very expensive, and produce side-effects as well;  instead of depending on such drugs, if Haldi-30 were to be widely used, it would not only be very cost effective, it would also improve the health outcomes on a mass level. Further, it would allay the extremely horrifying situation we are facing now.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '""This medicine is easy to use, but as covid is a serious illness, I administer it to patients under my direct supervision, and monitor them closely on a daily basis over the phone while they are under treatment. I am cautious when monitoring patients, that if there is any change in symptoms, I order a chest X-ray to ensure that the infection hasn’t entered the lungs.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '""Now there is a limit to how many cases I can manage myself alone. Although I may have researched and tested and verified the efficacy of this medicine, I have no desire or expectations of any monetary returns or benefit. As the medicine is very cost-effective, if the Government so decides, it could be made widely available to the public.""'
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocol-and-treatment-approach-9" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocol-and-treatment-approach-9" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Protocol and treatment approach:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Excerpt from an interview given by Vaidya Sarang Phadke in April, 2021:\n""I have observed that symptomatic patients respond to this medicine within the first 3-4 days, and usually 30% of patients become fully asymptomatic with just a single dose or within two or three days. Patients with Diabetes or other co-morbidities, become symptom-free in 7-8 days. However, I do have my patients continue to take the medicine for the full 14 day quarantine period. So far, I have treated close to 200 Covid-19 patients, ranging in age from a 1 year 10 month old baby girl to an elderly gentleman of 88. This medicine has been effective in 100% of all patients, who have recovered fully.""'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "For further information about the product, treatment modality, suppliers, any contraindications etc., here is a website that provides the names of physicians who offer this therapy, and who can be contacted for more information:"
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('Haldi-30"')]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "typical-duration-of-treatment-9" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#typical-duration-of-treatment-9" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Typical duration of treatment:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Excerpt from an interview given by Vaidya Sarang Phadke in April, 2021:\n""I have observed that symptomatic patients respond to this medicine within the first 3-4 days, and usually 30% of patients become fully asymptomatic with just a single dose or within two or three days. Patients with Diabetes or other co-morbidities, become symptom-free in 7-8 days. However, I do have my patients continue to take the medicine for the full 14 day quarantine period."""'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "outcome-9" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#outcome-9" } },
          [_vm._v("#")]
        ),
        _vm._v(" Outcome:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"Excerpt from an interview given by Vaidya Sarang Phadke in April, 2021:\n""I have observed that symptomatic patients respond to this medicine within the first 3-4 days, and usually 30% of patients become fully asymptomatic with just a single dose or within two or three days. Patients with Diabetes or other co-morbidities, become symptom-free in 7-8 days. However, I do have my patients continue to take the medicine for the full 14 day quarantine period. So far, I have treated close to 200 Covid-19 patients, ranging in age from a 1 year 10 month old baby girl to an elderly gentleman of 88. This medicine has been effective in 100% of all patients, who have recovered fully.""'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Adds Dr. Vikram Dravid, who is championing the novel treatment:"
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '""I personally have used this methodology in creating diverse formulae to treat various conditions, including treatment failures of modern medicine. This type of medicine works faster, at a lower dose than conventional Ayurvedic medicines, and with great ease of use for the patient.'
        ),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '""The great advantage to using Haldi-30 as a first-line treatment strategy is the extreme potency, which helps conserve natural herb resources amidst overwhelming demand during a pandemic."""'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "significant-side-effects-9" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#significant-side-effects-9" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Significant side effects:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "As both Turmeric and Sesame oil are edible food substances, this extract is non-toxic and proven to be safe, and Vaidya Dr. Sarang Phadke reports that they have been using it as an ingredient in various formulations in clinical practice for 16 years now."
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "recommended-quantity-for-stocking-9" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#recommended-quantity-for-stocking-9" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Recommended quantity for stocking:"),
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("VACANT")])]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "price-9" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#price-9" } }, [
          _vm._v("#"),
        ]),
        _vm._v(" Price:"),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v('"Says Vaidya Dr. Sarang Phadke:')]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '""There are some pharmaceutical medicines now being used which have worked well such as Fabilu (Favipiravir), but they are very expensive, and produce side-effects as well.  Instead of depending on such drugs, if Haldi-30 were to be widely used, it would not only be very cost effective, it would also improve the health outcomes on a mass level. Further, it would allay the extremely horrifying situation we are facing now."""'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "suggested-suppliers-9" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#suggested-suppliers-9" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Suggested suppliers:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v('"Find the nearest doctor offering Haldi 30 therapy here:'),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Haldi-30")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Dr. Vikram Dravid may be contacted for consultations and medical guidance at http://vikramdravid.com."'
        ),
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "further-references-9" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#further-references-9" },
          },
          [_vm._v("#")]
        ),
        _vm._v(" Further references:"),
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          '"For further information about the product, treatment modality, suppliers, any contraindications etc., here is a website that provides the names of physicians who offer this therapy, and who can be contacted for more information:'
        ),
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Haldi-30")]),
      _vm._v(" "),
      _c("p", [_vm._v("Haldi-30 on Facebook")]),
      _vm._v(" "),
      _c("p", [_vm._v("YouTube.com: In conversation with Dr. Vikram Dravid")]),
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}