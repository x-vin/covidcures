{"remainingRequest":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/x/repos/covidcures/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/x/repos/covidcures/docs/src/intappvaxrecovery.md?vue&type=template&id=854a7254&","dependencies":[{"path":"/Users/x/repos/covidcures/docs/src/intappvaxrecovery.md","mtime":1640947850723},{"path":"/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js","mtime":1640777136168},{"path":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640777136396},{"path":"/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js","mtime":1640777136168},{"path":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/index.js","mtime":1640777136291},{"path":"/Users/x/repos/covidcures/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1640777135896}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygKICAgICAgICAiaDEiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJhbi1pbnRlZ3JhdGVkLWFwcHJvYWNoLXRvLXZhY2NpbmUtcmVjb3ZlcnkiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FuLWludGVncmF0ZWQtYXBwcm9hY2gtdG8tdmFjY2luZS1yZWNvdmVyeSIgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIEFuIEludGVncmF0ZWQgQXBwcm9hY2ggdG8gVmFjY2luZSBSZWNvdmVyeSIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJub3Rlcy1vbi1kaWV0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNub3Rlcy1vbi1kaWV0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBOb3RlcyBvbiBEaWV0OiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdNaWxsZXRzOlxuTWlsbGV0cyBhcmUgZm91bmQgdG8gYmUgbGVzcyBpbmZsYW1tYXRvcnkgdGhhbiBvdGhlciBzdGFwbGUgZ3JhaW5zIGFuZCB0byBzdXBwb3J0IGltbXVuZSBoZWFsdGggYmV0dGVyLCBlc3BlY2lhbGx5IGluIHRoZSBjb250ZXh0IG9mIGEgQ292aWQtMTkgcHJvcGh5bGFjdGljIGRpZXQuIERyLiBLaGFkYXIgVmFsaSByZWNvbW1lbmRzIHRoZSBjb25zdW1wdGlvbiBvZiBvbmUgb2YgdGhlIGZvbGxvd2luZyA1ICIiUG9zaXRpdmUgTWlsbGV0cyIiIGF0IGxlYXN0IG9uY2UgYSBkYXkgd2hpbGUgcHJvcGh5bGF4aW5nOlxuRm94dGFpbCBtaWxsZXQgKFRpbmFpKSwgS29kbyBtaWxsZXQgKFZhcmFndSksIExpdHRsZSBtaWxsZXQgKFNhYW1haSksIEJhcm55YXJkIG1pbGxldCAoS3V0aGlyYXZhYWxpIGluIFRhbWlsIC8gT2RhbHUgaW4gVGVsdWd1KSwgQnJvd250b3AgbWlsbGV0IChQYWxhIHB1bCBpbiBUYW1pbCAvIEtvcnJhbHUgaW4gVGVsdWd1KScKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJNaWxsZXQgbWFuIERyLiBLaGFkYXIgVmFsaSdzIHJlY29tbWVuZGVkIG1pbGxldC1iYXNlZCBkaWV0YXJ5IHJlZ2ltZW4gZm9yIGhlYWx0aCBhbmQgcHJvcGh5bGF4aXNcbk1pbGxldCBEZXJpdmVkIEZsYXZvbm9pZHMgYXMgUG90ZW50aWFsIFNBUlMtQ29WLTIgTWFpbiBQcm90ZWFzZSBJbmhpYml0b3JzOiBBIENvbXB1dGF0aW9uYWwgQXBwcm9hY2g7IEFiaGlzZWsgTWlzaHJhIGV0IGFsLjsgQ2hlbVJ4aXY7IEF1Z3VzdCwgMjAyMCIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJIb3dldmVyLCBpdCBtYXkgYmUgZ29vZCBub3QgdG8gY29uc3VtZSBtaWxsZXRzIGluIGV4Y2VzcyBhcyB3ZWxsIChpLmUuLCBldmVyeWRheSBpbiBsYXJnZSBxdWFudGl0aWVzLCBlc3BlY2lhbGx5IHdoZW4gaW1wcm9wZXJseSBjb29rZWQsIGFzIGV4cGxhaW5lZCBiZWxvdykgYXMgdGhleSBjYW4gY2F1c2Ugc3RvbWFjaCBhY2hlLCBibG9hdGluZyBhbmQgY29uc3RpcGF0aW9uIGR1ZSB0byB0aGVpciBoaWdoIGZpYnJlIGNvbnRlbnQsIGFuZCBhcmUgYWxzbyBmb3VuZCB0byBjb250YWluIGdvaXRyb2dlbmljIGZsYXZvbm9pZHMgdGhhdCBibG9jayBpb2RpbmUgYWJzb3JwdGlvbiBhbmQgYXJlIGxpbmtlZCB0byBnb2l0cmUuIE1pbGxldHMsIGFuZCBlc3BlY2lhbGx5IHBlYXJsIG1pbGxldCwgYWxzbyBjb250YWluIGhpZ2ggYW1vdW50cyBvZiBveGFsYXRlcyB0aGF0IGFyZSB1bnN1aXRhYmxlIGZvciB0aG9zZSB3aXRoIGtpZG5leSBkaXNlYXNlIGFuZCBjYW4gcHJlY2lwaXRhdGUga2lkbmV5IHN0b25lcy4gVGhleSBhbHNvIGNvbnRhaW4gY2VydGFpbiBlbnp5bWUgaW5oaWJpdG9ycyBhbmQgcGh5dGljIGFjaWQsIHdoaWNoIGFyZSBjYWxsZWQgYW50aS1udXRyaWVudHMgYmVjYXVzZSB0aGV5IGluaGliaXQgbnV0cmllbnQgYWJzb3JwdGlvbiB1bmxlc3MgcHJvcGVyIGNvb2tpbmcgbWV0aG9kcyBhcmUgcHJhY3Rpc2VkLiBJbiBhZGRpdGlvbiwgbWlsbGV0cyBjb250YWluIHByb3RlYXNlICh0cnlwc2luIC8gY2h5bW90cnlwc2luKSBpbmhpYml0b3JzLCB3aGljaCBpbmhpYml0IGVuenltYXRpYyBhY3Rpb24gdG8gYnJlYWsgZG93biBwcm90ZWlucyBhbmQgdGhlcmVieSByZWR1Y2UgdGhlaXIgYWJzb3JwdGlvbiwgYXMgd2VsbCBhcyBjYXVzZSB0b3hpY2l0eSBpbiB0aGUgaW50ZXN0aW5lcywgcG90ZW50aWFsbHkgbGVhZGluZyB0byBsZWFreSBndXQuIERhcmtlciBtaWxsZXRzIGFyZSByZXBvcnRlZCB0byBjb250YWluIG1vcmUgYW50aW51dHJpZW50cy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2VtaS1yZWZpbmVkIG1pbGxldCBmbG91ciBjb250YWlucyBsZXNzIG9mIHRoZSBhbnRpbnV0cmllbnQgcGh5dGF0ZXMgYW5kIG94YWxhdGVzIChhcyB0aGUgYnJhbiBjb250YWlucyBhIGhpZ2hlciBkaXN0cmlidXRpb24gb2YgdGhlc2UgYW50aW51dHJpZW50cykgYW5kIG1vcmUgYmlvYXZhaWxhYmlsaXR5IG9mIGlyb24gYW5kIGNhbGNpdW0sIHdoaWxlIHJldGFpbmluZyBtdWNoIG9mIHRoZSBudXRyaWVudHMuIFRoZSBwcm90ZWFzZSBpbmhpYml0b3JzIGNhbiBiZSByZWR1Y2VkIGdyZWF0bHkgdGhyb3VnaCBzb2FraW5nIGFuZCBzcHJvdXRpbmcgbWlsbGV0cyBmb3IgNSBkYXlzIHByaW9yIHRvIGNvbnN1bXB0aW9uLCBhbmQgY29va2luZyB0aGVtIHdpdGggc3RlYW0gb3Igd2F0ZXIsIHJhdGhlciB0aGFuIGRyeSBoZWF0aW5nLiBBbm90aGVyIGltcG9ydGFudCBtZXRob2QgdG8gcmVkdWNlIGFudGludXRyaWVudHMgaW4gZm9vZCBpcyBmZXJtZW50YXRpb24uIEhvd2V2ZXIsIHByb3RlYXNlIGluaGliaXRvcnMgYXJlIGFsc28gdXNlZCBhcyBhbnRpdmlyYWwgbWVkaWNhdGlvbiBhcyB0aGV5IGhlbHAgYmxvY2sgdmlyYWwgcmVwbGljYXRpb24sIGFuZCBtYXkgYmUgaGVscGZ1bCBhcyBwcm9waHlsYWN0aWMgaWYgY29uc3VtZWQgaW4gbW9kZXJhdGlvbi4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2VsbG5lc3MgTXVuY2g6IEhvdyB0byBlbmpveSBtaWxsZXQgYmVuZWZpdHMgd2l0aG91dCBhbnkgc2lkZSBlZmZlY3RzOyBTZXB0LCAyMDE5XG5OdXRyaWVudHMsIGFudGludXRyaWVudHMgJiBiaW9hY2Nlc3NpYmxlIG1pbmVyYWwgY29udGVudCAoaW52aXRybykgb2YgcGVhcmwgbWlsbGV0IGFzIGluZmx1ZW5jZWQgYnkgbWlsbGluZzsgU3VtYSBhbmQgVXJvb2o7IEpvdXJuYWwgb2YgRm9vZCBTY2llbmNlIGFuZCBUZWNobm9sb2d5OyBPY3QsIDIwMTFcbkFudGludXRyaXRpb25hbCBmYWN0b3JzIGluIHBlYXJsIG1pbGxldCBncmFpbnM6IFBoeXRhdGUgYW5kIGdvaXRyb2dlbnMgY29udGVudCB2YXJpYWJpbGl0eSBhbmQgbW9sZWN1bGFyIGNoYXJhY3Rlcml6YXRpb24gb2YgZ2VuZXMgaW52b2x2ZWQgaW4gdGhlaXIgcGF0aHdheXM7IEJvbmNvbXBhZ25pIGV0IGFsLjsgUExvUyBPbmUsIEp1bmUsIDIwMThcblRyeXBzaW4vY2h5bW90cnlwc2luIGluaGliaXRvcnMgZnJvbSBtaWxsZXRzOyBUIE4gUGF0dGFiaXJhbWFuOyBBZHZhbmNlcyBpbiBleHBlcmltZW50YWwgbWVkaWNpbmUgYW5kZCBiaW9sb2d5OyAxOTg2XG5FZmZlY3RzIG9mIGhlYXQgdHJlYXRtZW50IGFuZCBnZXJtaW5hdGlvbiBvbiB0cnlwc2luIGFuZCBjaHltb3RyeXBzaW4gaW5oaWJpdG9yeSBhY3Rpdml0aWVzIGluIHNvcmdodW0gKFNvcmdodW0gYmljb2xvciAoTC4pIE1vZW5jaCkgc2VlZHM7IE11bGltYW5pIGFuZCBWYWRpcmFqOyBQbGFudCBmb29kcyBmb3IgaHVtYW4gbnV0cml0aW9uIChEb3JkcmVjaHQsIE5ldGhlcmxhbmRzKTsxOTk2XG5kcmF4ZS5jb206IFByb3RlYXNlOiBUaGUgRW56eW1lIHRoYXQgTWFrZXMgUHJvdGVpbiAmIEFtaW5vIEFjaWRzIFRpY2s7IFNlcHQsIDIwMThcbmRyYXhlLmNvbTogMTAgQW50aW51dHJpZW50cyB0byBHZXQgT3V0IG9mIFlvdXIgRGlldCDigKYgYW5kIExpZmU7IEZlYiwgMjAxOFxuTnV0cmllbnQgYW5kIEFudGludXRyaWVudCBDaGFuZ2VzIGluIEZpbmdlciBNaWxsZXQgKEVsZXVzaW5lIGNvcmFjYW4pIER1cmluZyBTcHJvdXRpbmc7IFMuIE1iaXRoaS1Nd2lreWEgZXQgYWwuOyBMV1QgLSBGb29kIFNjaWVuY2UgYW5kIFRlY2hub2xvZ3k7IEZlYiwgMjAwMFxuaGVhbHRoeW1hc3Rlci5pbjogaHR0cHM6Ly9oZWFsdGh5bWFzdGVyLmluL2Jsb2dzL2hvdy1lYXRpbmctbWlsbGV0cy1jYW4tYm9vc3QteW91ci1pbW11bml0eS1pbi0yMDIxLyIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiUmVjaXBlIGZvciBBbWJhbGkgKHNwcm91dGVkLCBmZXJtZW50ZWQgbWlsbGV0IHBvcnJpZGdlKToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRHIuIEtoYWRhciBWYWxpJ3MgcmVjaXBlIGZvciBtaWxsZXQgLyBTaXJ1ZGhhYW5peWEgcG9ycmlkZ2UgdGhhdCBtaW5pbWl6ZXMgdGhlIGFudGktbnV0cmllbnRzIGluIG1pbGxldHMgYW5kIG1heGltaXplcyBiaW9hdmFpbGFiaWxpdHkgb2YgdGhlIGJlbmVmaWNpYWwgcGh5dG9udXRyaWVudHMiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRGlldCBmb3IgQ2hyb25pYyBLaWRuZXkgRGlzZWFzZTpcblBhdGllbnRzIHdpdGggQ2hyb25pYyBLaWRuZXkgRGlzZWFzZSBzaG91bGQgYWRhcHQgdGhlIGRpZXQgdG8gdGhlaXIgcmVxdWlyZW1lbnRzIHdpdGggdGhlIGFkdmljZSBvZiB0aGVpciBjb25zdWx0YW50IHBoeXNpY2lhbiwgYXMgZnJ1aXRzIGFuZCB2ZWdldGFibGVzIGluIGxhcmdlIHF1YW50aXR5IG1heSBub3QgYmUgYWxsIHN1aXRhYmxlIHRvIHRoZWlyIG5lZWRzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJyZW5hbHRlYW0ub3JnOiBLaWRuZXktRnJpZW5kbHkgRnJ1aXRzIGFuZCBWZWdldGFibGVzXG5kYXZpdGEuY29tOiBBIERhVml0YSBEaWV0aXRpYW4ncyBUb3AgMTUgSGVhbHRoeSBGb29kcyBmb3IgUGVvcGxlIHdpdGggS2lkbmV5IERpc2Vhc2U7IERhVml0YcKuIHJlbmFsIGRpZXRpdGlhbiwgU2FyYSBDb2xtYW4sIFJELCBDU1IsIENERSIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTaW1wbGUgYW5kIEVmZmVjdGl2ZSBXYXkgb2YgVml0YW1pbiBEIFN1cHBsZW1lbnRhdGlvbiBpbiBhIFZlZ2FuIERpZXQ6XG5UaGUgcmVub3duZWQgbXljb2xvZ2lzdCBEci4gUGF1bCBTdGFtZXRzIGRpc2NvdmVyZWQgdGhhdCB0aGUgdml0YW1pbiBEIGxldmVscyBpbiB0aGUgU2hpaXRha2UgbXVzaHJvb20sIGRlZW1lZCBhIHN1cGVyZm9vZCBmb3IgaXRzIGdyZWF0IGJlbmVmaXRzIHRvIGhlYWx0aCwgc29hcmVkIGZyb20gYWJvdXQgMTAwIElVIC8gMTAwIGcgdG8gNDYsMDAwIElVIC8gMTAwIGcgd2hlbiBzdW4tZHJpZWQgZm9yIDEyIGhvdXJzIG92ZXIgdHdvIGRheXMsIGFuZCBtb3Jlb3ZlciwgdGhhdCB0aGUgc3RvcmVkIG11c2hyb29tcyBwcmVzZXJ2ZWQgc2lnbmlmaWNhbnQgYW1vdW50cyBvZiB0aGUgdml0YW1pbiBEMiB3aGVuIHRlc3RlZCBhZnRlciBhbiB5ZWFyLiBJdCB3YXMgYWxzbyBkaXNjb3ZlcmVkIHRoYXQgdGhlIHZpdGFtaW4gRCB0aHVzIHByb2R1Y2VkIHdhcyBhcyBiaW9hdmFpbGFibGUgYXMgRCBpbnRha2UgdGhyb3VnaCBudXRyYWNldXRpY2FsIHN1cHBsZW1lbnRzLiAoTm90ZTogV2hlbiBzdXBwbGVtZW50aW5nIHZpdGFtaW4gRCwgaXQgaXMgYWxzbyBpbXBvcnRhbnQgdG8gc3VwcGxlbWVudCBhbHNvIHdpdGggdml0YW1pbiBLMi4gRnVydGhlcm1vcmUsIGNvbmN1cnJlbnQgTWFnbmVzaXVtIGFuZCBDYWxjaXVtIHN1cHBsZW1lbnRhdGlvbiBhcmUgbmVjZXNzYXJ5IHRvIGltcHJvdmUgRCBhYnNvcnB0aW9uIGFuZCByZWFwIHRoZSBhZHZhbnRhZ2VzIHRvIGJvbmUgaGVhbHRoLCByZXNwZWN0aXZlbHkuKSIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTdHJvbmcgY29ycmVsYXRpb24gYmV0d2VlbiBwcmV2YWxlbmNlIG9mIHNldmVyZSB2aXRhbWluIEQgZGVmaWNpZW5jeSBhbmQgcG9wdWxhdGlvbiBtb3J0YWxpdHkgcmF0ZSBmcm9tIENPVklELTE5IGluIEV1cm9wZTsgUHVnYWNoICYgUHVnYWNoOyBXZWluZXIgS2xpbmlzY2hlIFdvY2hlbnNjaHJpZnQ7IEFwcmlsLCAyMDIxXG5WaXRhbWluIEQzIGFuZCBLMiBhbmQgdGhlaXIgcG90ZW50aWFsIGNvbnRyaWJ1dGlvbiB0byByZWR1Y2luZyB0aGUgQ09WSUQtMTkgbW9ydGFsaXR5IHJhdGU7IFNpbW9uIEdvZGRlazsgSW50ZXJuYXRpb25hbCBKb3VybmFsIG9mIEluZmVjdGlvdXMgRGlzZWFzZXM7IE9jdCwgMjAyMFxuZnVuZ2kuY29tOiBQbGFjZSBNdXNocm9vbXMgaW4gU3VubGlnaHQgdG8gR2V0IFlvdXIgVml0YW1pbiBEOyBQYXVsIFN0YW1ldHM7IEF1ZyAxNiwgMjAxMlxuQSBSZXZpZXcgb2YgTXVzaHJvb21zIGFzIGEgUG90ZW50aWFsIFNvdXJjZSBvZiBEaWV0YXJ5IFZpdGFtaW4gRDsgR2xlbm4gQ2FyZHdlbGw7IE51dHJpZW50czsgT2N0IDEzLCAyMDE4XG5jb29raW5nbGlnaHQuY29tOiBObyBPbmUgR2V0cyBFbm91Z2ggb2YgVGhpcyBEZXByZXNzaW9uLUZpZ2h0aW5nIFZpdGFtaW4sIGJ1dCBhIENyYXp5IE11c2hyb29tIFRlY2huaXF1ZSBDb3VsZCBDaGFuZ2UgVGhhdC0gVGhlIHRlcm0g4oCcbWFnaWMgbXVzaHJvb23igJ0gaGFzIGp1c3QgdGFrZW4gb24gYSB3aG9sZSBuZXcgbWVhbmluZzsgSmVubmlmZXIgS3VzaG5pZXI7IERlYyAxOSwgMjAxOFxuQ2FsY2l1bSwgdml0YW1pbiBELCB2aXRhbWluIEsyLCBhbmQgbWFnbmVzaXVtIHN1cHBsZW1lbnRhdGlvbiBhbmQgc2tlbGV0YWwgaGVhbHRoOyBBbm5hIENhcG96emkgZXQgYWwuOyBNYXR1cml0YXM7IE9jdCwgMjAyMFxuUm9sZSBvZiBNYWduZXNpdW0gaW4gVml0YW1pbiBEIEFjdGl2YXRpb24gYW5kIEZ1bmN0aW9uOyBBbm5lIE1hcmllIFV3aXRvbnplICYgTW9oYW1tZWQgUyBSYXp6YXF1ZTsgVGhlIEpvdXJuYWwgb2YgdGhlIEFtZXJpY2FuIE9zdGVvcGF0aGljIEFzc29jaWF0aW9uOyBNYXIgMSwgMjAxOCIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJub3Rlcy1vbi10aGUtcmVjb21tZW5kYXRpb25zLXRvLW1pdGlnYXRlLWxvbmctdGVybS1lZmZlY3RzLW9mLWNvdmlkLTE5LW1ybmEtYW5kLWRuYS12YWNjaW5lcyIsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjbm90ZXMtb24tdGhlLXJlY29tbWVuZGF0aW9ucy10by1taXRpZ2F0ZS1sb25nLXRlcm0tZWZmZWN0cy1vZi1jb3ZpZC0xOS1tcm5hLWFuZC1kbmEtdmFjY2luZXMiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgTm90ZXMgb24gdGhlIFJlY29tbWVuZGF0aW9ucyB0byBNaXRpZ2F0ZSBMb25nLVRlcm0gRWZmZWN0cyBvZiBDb3ZpZC0xOSBtUk5BIGFuZCBETkEgVmFjY2luZXM6IgogICAgICAgICAgKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlcmUgaGF2ZSBiZWVuIGEgcGxldGhvcmEgb2YgcmVwb3J0cywgbGFyZ2VseSBicm9hZGNhc3QgdmlhIHRoZSBGaWZ0aCBFc3RhdGUgb2YgdGhlIGluZm9ybWFsIHNvY2lhbCBjb21tdW5pY2F0aW9ucyBwbGF0Zm9ybXMsIGFib3V0IHRoZSBpbmFjY2VwdGFibHkgaGlnaCBzaG9ydCB0ZXJtIGFuZCBsb25nZXIgdGVybSBhZHZlcnNlIGVmZmVjdHMgb2YgdGhlIG5vdmVsIENvdmlkLTE5IHZhY2NpbmVzLiBIZXJlIGFyZSB0d28gaW50ZXJ2aWV3cyB0aGF0IG1pZ2h0IHRocm93IGxpZ2h0IG9uIHRoZSB0cnVlLCB1bmltYWdpbmFibGUgc2NvcGUgYW5kIHNldmVyaXR5IG9mIHRoZSBwcm9ibGVtLiBUaGUgaW50ZXJ2aWV3ZWUgaXMgYSBwcm9taW5lbnQgcmVzZWFyY2hlciBEci4gSmVzc2ljYSBSb3NlLCB3aG9zZSBwaGVub21lbmFsIGZpbmRpbmdzIGZyb20gdGhlIFZhY2NpbmUgQWR2ZXJzZSBFdmVudHMgUmVwb3J0aW5nIFNpdGUgKFZBRVJTKSBkYXRhIHdlcmUgYWN0aXZlbHkgc3VwcHJlc3NlZCBpbiB0aGUgcHVibGljIGRvbWFpbjpcbkdhbCBTaGFsZXYgSW50ZXJ2aWV3IHdpdGggRHIuIEplc3NpY2EgUm9zZS0gUGFydCAxLzJcbkdhbCBTaGFsZXYgSW50ZXJ2aWV3IHdpdGggRHIuIEplc3NpY2EgUm9zZS0gUGFydCAyLzIiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT2YgcG9zc2libGUgbG9uZ2VyIHRlcm0gc2V2ZXJlIGFkdmVyc2UgZXZlbnRzLCB0aGUgZ3JlYXRlc3QgY29ycmVsYXRpb24gYXBwZWFycyB0byBiZSB3aXRoIHRoZSBmb3JtYXRpb24gb2YgbWljcm9jbG90cyBpbiB0aGUgYmxvb2QsIGxpa2VseSBpbiByZXNwb25zZSB0byB0aGUgZGFtYWdlIHRvIGVuZG90aGVsaWFsIHdhbGxzIG9mIHRoZSBjYXJkaW92YXNjdWxhciBzeXN0ZW0sIGluIGFkZGl0aW9uIHRvIG90aGVyIGZvcm1zIG9mIGluZmxhbW1hdGlvbi4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhlIGJhc2ljIGFudGktaW5mbGFtbWF0b3J5IGRpZXQgcGxhbiAob3V0bGluZWQgaW4gdGhlIGxlZnRtb3N0IGJveCBiZWxvdykgaW50ZWdyYXRlcyB0aGUgaGlnaGx5IGV2aWRlbmNlLWJhc2VkIHJlY29tbWVuZGF0aW9ucyBvZiBhY2NsYWltZWQgbmF0dXJvcGF0aCBEci4gQmlzd2Fyb29wIFJveSBDaG93ZGh1cnksIFBoRCwgdGhlIERJUCAoRGlzY2lwbGluZWQgSW50ZWxsaWdlbnQgUHJvdG9jb2wpIERpZXQsIGFuZCB0aGUgd2VsbC1yZXNlYXJjaGVkIGFuZCBwcm92ZW4gKG1pbGxldC1iYXNlZCkgZGlldGFyeSBwcmVzY3JpcHRpb25zIG9mIERyLiBLaGFkYXIgVmFsaSwgUGhELiBCb3RoIHBoeXNpY2lhbnMgaGF2ZSBhbWFzc2VkIGEgcmVwdXRhdGlvbiBmb3IgaGVhbGluZyB0aG91c2FuZHMgb2YgcGF0aWVudHMgb2Ygb3RoZXJ3aXNlIGludHJhY3RhYmxlIGFuZCBkZWJpbGl0YXRpbmcgY2hyb25pYyBhbmQgbGlmZXN0eWxlIGRpc2Vhc2VzLCBpbmNsdWRpbmcgZGlhYmV0ZXMsIENWRCBhbmQgY2FuY2VyLCBhcyB3ZWxsIGFzIHRyZWF0aW5nIHRob3VzYW5kcyBvZiBDb3ZpZC0xOSBwYXRpZW50cywgaW5jbHVkaW5nIHBhdGllbnRzIHdpdGggYWR2YW5jZWQgc3ltcHRvbXMsIG9mIHRoZSBpbmZlY3Rpb24gdXNpbmcgZGlldCBhbmQgaW50ZWdyYXRpdmUgaG9saXN0aWMgdGhlcmFweSBhbG9uZS4gVGhlIHN1Z2dlc3RlZCBkaWV0IGFuZCBsaWZlc3R5bGUgaGF2ZSBhbHNvIGJlZW4gZ3JlYXRseSBpbmZvcm1lZCBhbmQgaW5zcGlyZWQgYnkgRGF2aWQgV29sZmUncyBTcGlrZSBQcm90ZWluIFByb3RvY29sLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBoZWFsdGh5IGxpZmVzdHlsZSBhbmQgYW50aS1pbmZsYW1tYXRvcnkgQXl1cnZlZGljIGFuZCBoZXJiYWwgbWVkaWNhdGlvbnMsIGhlcmUgcmVjb21tZW5kZWQgdG8gYmUgYWRvcHRlZCBhbG9uZyB3aXRoIHRoZSBwcm9wb3NlZCBkaWV0IHBsYW4sIGFyZSBkZXJpdmVkIGZyb20gZXZpZGVuY2UtYmFzZWQgcmVzZWFyY2ggaW4gaW50ZWdyYXRpdmUgbWVkaWNpbmUgYW5kIGZyb20gdGhlIHJlY29tbWVuZGF0aW9ucyBvZiB0aGUgQVlVU0ggTWluaXN0cnksIGFzIHdlbGwgYXMgdGhlIGxvbmcgcHJvdmVuIGFuZCBlbXBpcmljYWwgbGlmZXN0eWxlIGFuZCBzZWxmLWNhcmUgcmVjb21tZW5kYXRpb25zIG9mIGFjY2xhaW1lZCB0cmFkaXRpb25hbCBOYXR1cmUgQ3VyZSBwcmFjdGl0aW9uZXIgQWNoYXJ5YSBBcnVuIFNoYXJtYSwgZ3JhbmRzb24gYW5kIGRpc2NpcGxlIG9mIEFjaGFyeWEgTGFrc2htYW5hIFNoYXJtYSwgdmVuZXJhdGVkIGFzIGEgcGlvbmVlciBvZiBuYXR1cm9wYXRoeSBhbmQgTmF0dXJlIEN1cmUgaW4gSW5kaWEuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhlIHRoZXJhcHkgdG8gY291bnRlciB0aGUgZWZmZWN0IG9mIHRoZSBpbmR1Y2VkIGh5cGVyaW5mbGFtbWF0b3J5IHNwaWtlIHByb3RlaW5zIGZyb20gdGhlIHZhY2NpbmUsIGlzIGFuIGludGVncmF0aXZlIGFwcHJvYWNoLCBjb21iaW5pbmcgdGhlIG1vc3QgZXZpZGVuY2UtYmFzZWQgYW5kIGFjY2Vzc2libGUgcmVjb21tZW5kYXRpb25zIG9mIGhvbWVvcGF0aHksIEF5dXJ2ZWRhIGFuZCBpbnRlZ3JhdGl2ZSBhbGxvcGF0aHkuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiT2YgYWJvdXQgNTAgZGlmZmVyZW50IGhpZ2hseSBlZmZlY3RpdmUgaW50ZWdyYXRpdmUgYXBwcm9hY2hlcyB0byBDb3ZpZC0xOSB0cmVhdG1lbnQgc3VydmV5ZWQsIGVhY2ggb2Ygd2hpY2ggYXJlIGtub3duIHRvIG9mZmVyIG5lYXJseSBjb21wbGV0ZSBjdXJlIHJhdGUgKGluIHRoaXMgY2FzZSwgYSBuZWFybHkgY29tcGxldGUgZWZmaWNhY3kgYWdhaW5zdCBzcGlrZS1pbmR1Y2VkIGluZmxhbW1hdG9yeSByZXNwb25zZSkgLCB0aGUgcmVjb21tZW5kYXRpb25zIGluIHRoZSBjb2x1bW5zIGJlbG93IGhhdmUgZmlsdGVyZWQgb3V0IGFuZCBjb21iaW5lZCBhIHNldCBvZiBpbnRlZ3JhdGl2ZSBzdHJhdGVnaWVzIHRoYXQgYXJlIG1vc3QgYWxpZ25lZCB3aXRoIHRoZSBrbm93biBlZmZlY3RpdmUgcmVtZWRpZXMgaW4gbmF0dXJvcGF0aHksIGhvbWVvcGF0aHkgYW5kIEF5dXJ2ZWRhLCB3aGlsZSBhY2tub3dsZWRnaW5nIGEgZmV3IGV4dHJlbWVseSBlZmZlY3RpdmUgbWFpbnN0cmVhbSBwcm90b2NvbHMgYXMgd2VsbC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaHJvdWdoIHN1Y2ggYW4gaW50ZWdyYXRpdmUgYW5kIHN1c3RhaW5hYmxlIGFwcHJvYWNoLCBzZWVraW5nIHRvIGltcHJvdmUgYW5kIHN1cHBvcnQgb3ZlcmFsbCBoZWFsdGggYW5kIGltbXVuaXR5LCByZXZlcnNlIHRoZSBzcGVjaWZpYyB0eXBlIG9mIGxvbmctdGVybSBpbmZsYW1tYXRpb24gaW5kdWNlZCBieSB0aGUgc3Bpa2UgcHJvdGVpbnMsIGFzIHdlbGwgYXMgcmV2ZXJzZSBvciBtaXRpZ2F0ZSBsaWZlc3R5bGUgZGlzZWFzZXMtIGxpa2UgZGlhYmV0ZXMsIENhcmRpby1WYXNjdWxhciBEaXNlYXNlLCBDaHJvbmljIE9ic3RydWN0aXZlIFB1bG1vbmFyeSBEaXNlYXNlLCBhc3RobWEsIG9yIGV2ZW4gKHdpdGggZGlsaWdlbmNlIGFuZCBpZiBuZWVkIGJlLCBhZGp1bmN0IGhvbGlzdGljIHRoZXJhcHkpIG1vcmUgc2VyaW91cyBjb25kaXRpb25zLSB0aHJvdWdoIHRpbWUtdGVzdGVkIG5hdHVyb3BhdGhpYyBhbmQgQXl1cnZlZGljIGRpZXQgYW5kIGxpZmVzdHlsZSB3aGlsZSB5ZXQgc3RyaXZpbmcgdG8gbWFuYWdlIGluZmxhbW1hdGlvbiBkdWUgdG8gdGhlIHZhY2NpbmVzIHRoZW1zZWx2ZXMsIHdlIGhvcGUgdG8gc3VnZ2VzdCBhbiBlZmZlY3RpdmUgcm9hZG1hcCBmb3IgaW5kaXZpZHVhbHMgdG8gY29uc2VydmUgaGVhbHRoIGluIHRoZSBtb3N0IGludGVsbGlnZW50IGFuZCByZWxpYWJsZSBtYW5uZXIsIHdpdGggdGhlIGhlbHAgb2YgZXZpZGVuY2UtYmFzZWQgaW50ZWdyYXRpdmUgbWVkaWNpbmUuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAnVGhlIHJlY29tbWVuZGF0aW9ucyBpbiBhbGwgMyBjb2x1bW5zIGJlbG93IG1heSBiZSBmb2xsb3dlZCBmb3IgYSBiZXN0IG91dGNvbWUuXG4iJwogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}