{"remainingRequest":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/x/repos/covidcures/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/x/repos/covidcures/docs/src/homeopathic.md?vue&type=template&id=7e74fa77&","dependencies":[{"path":"/Users/x/repos/covidcures/docs/src/homeopathic.md","mtime":1640947850723},{"path":"/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js","mtime":1640777136168},{"path":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640777136396},{"path":"/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js","mtime":1640777136168},{"path":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/index.js","mtime":1640777136291},{"path":"/Users/x/repos/covidcures/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1640777135896}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiaG9tZW9wYXRoaWMtdHJlYXRtZW50cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaG9tZW9wYXRoaWMtdHJlYXRtZW50cyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIb21lb3BhdGhpYyBUcmVhdG1lbnRzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkRJU0NMQUlNRVIiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICI6IFRoaXMgaW5mb3JtYXRpb24gaXMgZm9yIGVkdWNhdGlvbmFsIHB1cnBvc2VzIG9ubHkuIEl0IGlzIG5vdCBpbnRlbmRlZCB0byBzZXJ2ZSBhcyBhIHN1YnN0aXR1dGUgZm9yIGRpYWdub3NpcywgdHJlYXRtZW50LCBvciBhZHZpY2UgZnJvbSBhIHF1YWxpZmllZCwgbGljZW5zZWQgbWVkaWNhbCBwcm9mZXNzaW9uYWwuIEFueSB0cmVhdG1lbnQgeW91IHVuZGVydGFrZSBzaG91bGQgYmUgZGlzY3Vzc2VkIHdpdGggeW91ciBwaHlzaWNpYW4gb3Igb3RoZXIgbGljZW5zZWQgbWVkaWNhbCBwcm9mZXNzaW9uYWwuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk5PVEUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICc6IFRoZSBpbmZvcm1hdGlvbiBpbiB0aGlzIHRhYnVsYXRpb24gYWJvdXQgZG9zYWdlcyBpcyBwcmltYXJpbHkgZm9yIGFkdWx0cy4gVGhlIGRvc2FnZXMgZm9yIGNoaWxkcmVuIGhhdmUgYmVlbiBtZW50aW9uZWQgaW4gdGhlIGNhc2Ugb2YgYSBmZXcgb3Zlci10aGUtY291bnRlciByZW1lZGllcyB3aGVyZSB0aGUgZGF0YSB3YXMgYXZhaWxhYmxlLiInCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAiXzEtYXJzZW5pY3VtLWFsYnVtLTMwYy1vci1hcnNhbGItd2l0aC1wb3RlbmN5LTMwLW9yLTIwMC1jLWZvci1tb3JlLXNldmVyZS1jYXNlcy1jYW1waG9yLTEtbSIsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjXzEtYXJzZW5pY3VtLWFsYnVtLTMwYy1vci1hcnNhbGItd2l0aC1wb3RlbmN5LTMwLW9yLTIwMC1jLWZvci1tb3JlLXNldmVyZS1jYXNlcy1jYW1waG9yLTEtbSIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiAxLiBBcnNlbmljdW0gYWxidW0gMzBDIChvciBBcnNhbGIgd2l0aCBwb3RlbmN5IDMwKSwgb3IgMjAwIEMgZm9yIG1vcmUgc2V2ZXJlIGNhc2VzOyBDYW1waG9yIDEgTSIKICAgICAgICAgICksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm9iamVjdGl2ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjb2JqZWN0aXZlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBPYmplY3RpdmU6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJQcm9waHlsYWN0aWMgYXMgd2VsbCBhcyBjdXJhdGl2ZSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic3lzdGVtIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzeXN0ZW0iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgU3lzdGVtOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiSG9tZW9wYXRoaWMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiY2FuLWJlLXVzZWQtYWxvbmdzaWRlLW90aGVyLWFsbG9wYXRoaWMtdHJlYXRtZW50cyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2Nhbi1iZS11c2VkLWFsb25nc2lkZS1vdGhlci1hbGxvcGF0aGljLXRyZWF0bWVudHMiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBDYW4gYmUgdXNlZCBhbG9uZ3NpZGUgb3RoZXIgYWxsb3BhdGhpYyB0cmVhdG1lbnRzOiIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJZZXMsIHdpdGggdGhlIGNhdmVhdCB0aGF0IHRoZSBwYXRpZW50IGV4cGVyaWVuY2VzIG5vIGRpc2NvbWZvcnQgaW4gZG9pbmcgc28uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInN0YXR1cy1vZi1hdXRob3Jpc2F0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdGF0dXMtb2YtYXV0aG9yaXNhdGlvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTdGF0dXMgb2YgYXV0aG9yaXNhdGlvbjoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSG9tZW9wYXRoaWMgdHJlYXRtZW50IGZvciBDb3ZpZCwgQXJzZW5pY3VtIEFsYnVtLCByZXBvcnRlZCB0byBiZSBhdXRob3Jpc2VkIGJ5IHRoZSBJbmRpYW4gU3VwcmVtZSBDb3VydCBpbiBNYXJjaCwgMjAyMC4gQm90aCBDYWFtcGhvciAxIE0gYW5kIEFyc2FsYiBoYXZlIGJlZW4gYXBwcm92ZWQgZm9yIHVzZSBieSB0aGUgTWluaXN0cnkgb2YgQXl1c2guIE5vIHNjaWVudGlmaWMgZXZpZGVuY2UgKGZyb20gUkNUIHRyaWFscykgaXMgc2FpZCB0byBiZSBhdmFpbGFibGUgYnV0IGl0IGlzIHdlbGwta25vd24gYW1vdW5nIGNvbW11bml0aWVzIHRoYXQgdXNlIHRoZXNlIG1lZGljYXRpb25zIGZvciBwcm9waHlsYXhpbmcgdGhhdCB0aGV5IGFyZSBleHRyZW1lbHkgZWZmZWN0aXZlLiBUaGVyZSBleGlzdHMgYSBjb25zaWRlcmFibGUgYm9keSBvZiBjcmVkaWJsZSByZXBvcnRlZCBldmlkZW5jZSBmcm9tIGxhcmdlIGNvbW11bml0aWVzIHdobyBoYXZlIHVzZWQgYm90aCB0aGVzZSB0cmVhdG1lbnRzLCBhbmQgZXNwZWNpYWxseSBBcnNhbGIsIGFzIHByb3BoeWxheGlzIHdpdGggZ3JlYXQgc3VjY2Vzcy4gUGVybWl0dGVkIHRvIGJlIHVzZWQgaW4gbWFpbnN0cmVhbSB0cmVhdG1lbnQgb25seSBhbG9uZ3NpZGUgdGhlIFdITy1wcm90b2NvbCwgYW5kIHRoZXJlZm9yZSB0aGUgb3V0Y29tZSBvZiB0aGlzIHRyZWF0bWVudCBjYW5ub3QgYmUga25vd24gZXZlbiBmcm9tIGF2YWlsYWJsZSBkYXRhIGluIHdpZGVzcHJlYWQgY2xpbmljYWwgdHJpYWxzIHdpdGhpbiBtYWluc3RyZWFtIGhlYWx0aGNhcmUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhvd2V2ZXIsIG1haW5zdHJlYW0gbWVkaWNpbmUgYW5kIG1lZGlhIGhhdmUgbm90IGNvbWUgcm91bmQgdG8gYWNrbm93bGVkZ2luZyB0aGUgZWZmaWNhY3kgb2YgaG9tZW9wYXRoaWMgbWVkaWNpbmUsIGluIHRoZSBmYWNlIG9mIHRyZW1lbmRvdXMgZW1waXJpY2FsIGV2aWRlbmNlIGZyb20gdGhlIGNvbW11bml0aWVzIHRoYXQgdXNlIHRoZW0uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInByb3RvY29sLWFuZC10cmVhdG1lbnQtYXBwcm9hY2giIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Byb3RvY29sLWFuZC10cmVhdG1lbnQtYXBwcm9hY2giIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJvdG9jb2wgYW5kIHRyZWF0bWVudCBhcHByb2FjaDoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSG9tZW9wYXRocyBsaWtlIERyLiBNZCBBbC1FbXJhbiBBbGkgb2YgR292ZXJubWVudCBNZWRpY2FsIENvbGxlZ2UgSG9zcGl0YWwsIEJhbmdsYWRlc2gsIHJldmVhbCB0aGF0IHRoZXJlIGFyZSBtYW55IG1lZGljaW5lcyBpbiBob21vZW9wYXRoeSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gdHJlYXQgQ292aWQtMTkgcGF0aWVudHMgYmFzZWQgb24gc2ltaWxhcml0eSBvZiBzeW1wdG9tcy4g4oCcT2YgdGhlIG1lZGljaW5lcywgUmh1cyBUb3gsIEJyeW9uaWEgQWxiYSwgQW50aW1vbml1bSBUYXJ0YXJpY3VtIG9yIEFudGltIFRhcnQgYW5kIENhbXBob3IgYXJlIGNvbW1vbiBtZWRpY2luZXMgdG8gdHJlYXQgcGVvcGxlIGluZmVjdGVkIHdpdGggdGhlIENvdmlkLTE5IGRpc2Vhc2Us4oCdIHNhaWQgRHIuIEFsLUVtcmFuIEFsaS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiU29tZSBwcmluY2lwbGVzIG9mIGhvbWVvcGF0aGljIHRyZWF0bWVudCwgYXMgYWR2aXNlZCBieSBhIHByYWN0aXNpbmcgaG9tZW9wYXRoOiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuSG9tZW9wYXRocyBhZG1pbmlzdGVyIHN5bXB0b21hdGljIHRyZWF0bWVudCB0aGF0IGlzIG5vbmV0aGVsZXNzIHRhaWxvcmVkIHRvIHRoZSBwaHlzaW9sb2dpY2FsIGNvbnRleHQgb2YgdGhlIGluZGl2aWR1YWwgcGF0aWVudC4gVGh1cyBpbiBob21lb3BhdGh5LCB0aGUgc2FtZSBzeW1wdG9tcyBtYXkgbm90IGJlIHByZXNjcmliZWQgdGhlIHNhbWUgcmVtZWR5IGluIGRpZmZlcmVudCBwYXRpZW50cy4gSW4gdGhlIGNhc2Ugb2YgdGhlIHdpZGVseSBwcmVzY3JpYmVkIGFuZCBwcm92ZW4gcHJvcGh5bGFjdGljIEFyc2FsYiAzMCBDLCBwZXJoYXBzIHRoZSB1bmRlcmx5aW5nIHJlYXNvbiBmb3IgaXRzIGVmZmljYWN5IGlzIGR1ZSB0byBhIGNvbW1vbiBnbG9iYWwgY29udGV4dCBjcmVhdGVkIGJ5IHRoZSBwYW5kZW1pYy4gQXJzYWxiIDMwIGlzIGEgcHJldmVudGF0aXZlLCBub3QgY3VyYXRpdmUsIGFuZCBpcyBtZWFudCB0byBhZGRyZXNzIHRoZSBjb21tb24gc3ltcHRvbXMgb2YgY29sZCwgZmV2ZXIsIHNuZWV6aW5nIGFuZCBvdGhlciBhaWxtZW50IGR1ZSB0byBjb3JvbmF2aXJ1c2VzLiBBcnNhbGIgMzAgYWxzbyBlbmdhZ2VzIHRoZSBwYXJhc3ltcGF0aGV0aWMgbmVydm91cyBzeXN0ZW0gYW5kIGNhbG1zIGFueGlldHkgb3IgZmVhci4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiUHJvcGh5bGFjdGljIHByb3RvY29sczoiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQXJzZW5pY3VtIEFsYnVtIDMwIEM6IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5UaGVyZSBhcmUgbXVsdGlwbGUsIHNsaWdodGx5IGRpZmZlcmVudCBwcm90b2NvbHMuIE9uZSBvZiB0aGVtLCBmb3IgcHJvcGh5bGFjdGljIHRyZWF0bWVudCwgcmVjb21tZW5kcyA0IHBpbGxzICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIoZm9yIGFkdWx0cywgMiBwaWxscyBmb3IgY2hpbGRyZW4pIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZvciA0IGRheXMgZXZlcnkgMy00IHdlZWtzIGVtcHR5IHN0b21hY2ggYmVmb3JlIGJydXNoaW5nIHRlZXRoLCBhZnRlciByaW5zaW5nIG1vdXRoLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQWx0ZXJuYXRpdmVseSwgY2FuIGhhdmUgMy00IGRyb3BzIGZvciBhZHVsdHMgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIigxIGRyb3AgZm9yIGNoaWxkcmVuKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBvZiBsaXF1aWQgQXJzYWxiIChwb3RlbmN5IDMwKSBkaWx1dGVkIGluIDIwLTMwIG1sICgyLTMgdGFibGVzcG9vbnMpIG9mIHdhdGVyLCBpbnN0ZWFkIG9mIHRoZSBwaWxscy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ29uc3VtZSBubyBmb29kLCB0ZWEsIGNvZmZlZSBvciBldmVuIHdhdGVyIGZvciB0aGUgbmV4dCAxIGhvdXIuIFJlcGVhdCBldmVyeSAzLTQgd2Vla3MuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ2FtcGhvciAxIE06IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5UaGUgZG9zYWdlIG9mIENhbXBob3IgMSBNIGZvciBhZHVsdHMgaXMgZm91ciBwaWxscyBoYWxmIGFuIGhvdXIgYWZ0ZXIgbW9ybmluZyBicmVha2Zhc3QsIGZvdXIgcGlsbHMgaGFsZiBhbiBob3VyIGFmdGVyIGx1bmNoIGFuZCBmb3VyIHBpbGxzIGhhbGYgYW4gaG91ciBhZnRlciBkaW5uZXIuIFRoZSBkb3NhZ2UgaXMgaGFsdmVkIGZvciBjaGlsZHJlbi4gVGhlIHJlZ2ltZW4gaGFzIHRvIGJlIGZvbGxvd2VkIGZvciB0aHJlZSBkYXlzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGVyZSBhcmUgbm8gZXNwZWNpYWwgZGlldGFyeSBwcmVjYXV0aW9ucyB0byBiZSBmb2xsb3dlZCBmb3IgQXJzYWxiIHByb3BoeWxheGluZywgZXhjZXB0IHRvIGFic3RhaW4gZnJvbSBjb2ZmZWUgYW5kIHRlYSwgYW5kIGlmIHBvc3NpYmxlLCBub252ZWdldGFyaWFuIGZvb2QuIFdoaWxlIHByb3BoeWxheGluZyB3aXRoIENhbXBob3IgMSBNLCBvbmUgc2hvdWxkIGF2b2lkIGNvbnN1bXB0aW9uIG9mIG9uaW9uLCBnYXJsaWMgYW5kIGhpbmcuIEl0IGlzIGFsc28gYWR2aXNhYmxlIHRvIG5vdCBjb25zdW1lIGFueXRoaW5nIGZvciBoYWxmIGFuIGhvdXIgYWZ0ZXIgdGFraW5nIENhbXBob3IgMU0uIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidHlwaWNhbC1kdXJhdGlvbi1vZi10cmVhdG1lbnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3R5cGljYWwtZHVyYXRpb24tb2YtdHJlYXRtZW50IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFR5cGljYWwgZHVyYXRpb24gb2YgdHJlYXRtZW50OiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiUmVjb21tZW5kZWQgdG8gYmUgdXNlZCBjb250aW51b3VzbHkgYXMgcHJvcGh5bGFjdGljLiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAib3V0Y29tZSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjb3V0Y29tZSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBPdXRjb21lOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFbXBpcmljYWwgZXZpZGVuY2Ugb2YgYmVpbmcgaGlnaGx5IGVmZmVjdGl2ZSwgZXZlbiBpbiBoaWdoIHJpc2sgZ3JvdXBzLCBhbmQgbmVhcmx5IHplcm8gbW9ydGFsaXR5IHJhdGUgaW4gYSBjaGFyaXRhYmxlIHNoZWx0ZXIgZm9yIGRlc3RpdHV0ZSBhbmQgYWlsaW5nIGVsZGVybHkgcGVvcGxlLCBhbW9uZyB3aG9tIGFib3V0IDQwMCB3ZXJlIGFmZmVjdGVkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJzaWduaWZpY2FudC1zaWRlLWVmZmVjdHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NpZ25pZmljYW50LXNpZGUtZWZmZWN0cyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTaWduaWZpY2FudCBzaWRlIGVmZmVjdHM6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldpZGVseSB1c2VkIGJ5IHRob3NlIHdobyBzdWJzY3JpYmUgdG8gaG9tZW9wYXRoeS4gTm8gZGVjbGFyZWQgc2lkZSBlZmZlY3RzIGV2ZW4gd2l0aCByZWd1bGFyIHVzZTsgbm8gZHJ1ZyBpbnRlcmFjdGlvbnMgd2l0aCBvdGhlciBtZWRpY2luZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInJlY29tbWVuZGVkLXF1YW50aXR5LWZvci1zdG9ja2luZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcmVjb21tZW5kZWQtcXVhbnRpdHktZm9yLXN0b2NraW5nIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlY29tbWVuZGVkIHF1YW50aXR5IGZvciBzdG9ja2luZzoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVW5uZWNlc3NhcnkgdG8gc3RvY2sgYXMgdGhlIG1lZGljaW5lIGlzIGNvbW1vbmx5IGF2YWlsYWJsZSBpbiBsb2NhbCBob21lb3BhdGh5IHN0b3Jlcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicHJpY2UiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3ByaWNlIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFByaWNlOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJWZXJ5IGluZXhwZW5zaXZlLCBJTlIgNTAtNjAgZm9yIDE1IG1sIChoYWxmLW91bmNlKSBib3R0bGUsIHdoaWNoIGNhbiBiZSB1c2VkIGZvciBwcm9waHlsYXhpbmcgZm9yIHNldmVyYWwgbW9udGhzIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInN1Z2dlc3RlZC1zdXBwbGllcnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3N1Z2dlc3RlZC1zdXBwbGllcnMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3VnZ2VzdGVkIHN1cHBsaWVyczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTG9jYWwgaG9tZW9wYXRoeSBzdG9yZXMgb3Igb25saW5lLiBPbmUgcmVjb21tZW5kZWQgYnJhbmQgaXMgU0JMIEFyc2VuaWN1bSBBbGJ1bSAzMCBDSCBkaWx1dGlvbiwgYm90dGxlIG9mIDMwIG1sIGRpbHV0aW9uLCBmb3IgSU5SIDcyLiBDYW4gYmUgYm91Z2h0IG9ubGluZSwgZm9yIGV4YW1wbGUsIGF0IHd3dy4xbWcuY29tLiBUaGUgU0JMIGJyYW5kIGNhbiBhbHNvIGJlIGJvdWdodCBhdCBsb2NhbCBzdG9yZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZ1cnRoZXItcmVmZXJlbmNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZnVydGhlci1yZWZlcmVuY2VzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZ1cnRoZXIgcmVmZXJlbmNlczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuYXl1c2guZ292LmluL2RvY3MvaG9tZW9wYXRoeS1ndWlkZWxpbmVzLnBkZiIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiR3VpZGVsaW5lcyBmb3IgSG9tZW9wYXRoaWMgUHJhY3RpdGlvbmVycyBmb3IgQ09WSUQtMTk7IE1pbmlzdHJ5IG9mIEFZVVNILCBHb3Zlcm5tZW50IG9mIEluZGlhIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8veW91dHUuYmUvZ09XZUJqVWZSakkiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIk1pbGxldCAvIFNpcnVkaGFhbml5YSBBbWJhbGkgKHNwcm91dGVkICsgZmVybWVudGVkIGhlYWx0aHkgcG9ycmlkZ2UpIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8veW91dHUuYmUvZ09XZUJqVWZSakkiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZUhlYWx0aFNpdGUuY29tOiBNaWxsaW9ucyBvZiBwZW9wbGUgaW4gSW5kaWEgYXJlIHRha2luZyB0aGlzIGhvbWVvcGF0aGljIGRydWcgdG8gcHJldmVudCBDT1ZJRC0xOSBpbmZlY3Rpb247IExvbmdqYW0gRGluZXNod29yaTsgRGVjIDE3LCAyMDIwIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuVGhlIGdvdmVybm1lbnRzIG9mIEd1amFyYXQsIEtlcmFsYSwgT2Rpc2hhLCBUcmlwdXJhIGFuZCBhIGZldyBvdGhlciBzdGF0ZXMgYXJlIGRpc3RyaWJ1dGluZyBhIGhvbWVvcGF0aGljIGRydWcgdG8gcGVvcGxlIGZyZWUgb2YgY29zdCB0byBpbXByb3ZlIHRoZWlyIGltbXVuaXR5IHRvIGZpZ2h0IGNvcm9uYXZpcnVzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJIYW5kYm9vayBGb3IgSGVhbHRoLCBhIGNvbXBpbGF0aW9uIG9mIHRyaWVkIGFuZCB0ZXN0ZWQgaG9tZSByZW1lZGllcyBieSBLZXJhbGEgbmF0dXJvcGF0aCwgQWxiZXJ0IFkuIFphY2hhcmlhIChJbm5lciBFeHBhbnNpb24gQ29hY2gsICs5MSA4OTIxNjk3OTI4KSIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy50aGVoaW5kdWJ1c2luZXNzbGluZS5jb20vbmV3cy9taW5pc3RyeS1vZi1heXVzaC1pc3N1ZXMtYWR2aXNvcnktb24tdXNlLW9mLXRyYWRpdGlvbmFsLW1lZGljaW5hbC1wcmFjdGljZXMvYXJ0aWNsZTMwNjkwMTI4LmVjZSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhlIEhpbmR1IEJ1c2luZXNzTGluZTogSG9tb2VvcGF0aHkgcHJhY3RpdGlvbmVycyBjbGFpbSB0byBoYXZlIGlkZW50aWZpZWQgbW90aGVyIHRpbmN0dXJlcyB0aGF0IGNhbiBhY3QgYWdhaW5zdCBjb3JvbmF2aXJ1cyBpbmZlY3Rpb247IFJ1dGFtIFZvcmE7IEphbiAzMCwgMjAyMCIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZm9sbG93aW5nIGFydGljbGUgaW5kaWNhdGVzIHRoYXQgQnJ5b25pYSAoQWxiYSkgYW5kIFJodXMgVG94IGFyZSBuYXR1cmFsIGhvbWVvcGF0aGljIG1lZGljaW5lcyBwcmVzY3JpYmVkIGZvciBmZXZlciB3aXRoIGV4dHJlbWUgYm9keSBhY2hlLiBPZiB0aGVzZSwgQnJ5b25pYSBpcyBwcmVzY3JpYmVkIHdoZW4gdGhlIGZldmVyIGFuZCBib2R5IGFjaGUgYXJlIGFjY29tcGFuaWVkIGJ5IGV4dHJlbWUgZmF0aWd1ZSBhbmQgbGlzdGxlc3NuZXNzLCBhIGhhcmQsIGRyeSBjb3VnaCBhbmQgc2V2ZXJlIGhlYWRhY2hlLiBSaHVzIFRveCBpcyBwcmVzY3JpYmVkIHdoZW4gdGhlIGZldmVyIGFuZCBib2R5IGFjaGUgYXJlIGFjY29tcGFuaWVkIGJ5IHJlc3RsZXNzbmVzcy4gQXJzZW5pY3VtIEFsYnVtIGlzIGEgY29tbW9uIHJlbWVkeSBmb3IgbWFsYXJpYWwgZmV2ZXIsIGFjY29tcGFuaWVkIGJ5IGFueGlldHk6XG4iCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuZHJob21lby5jb20vZmV2ZXIvZmx1LXZpcmFsLWZldmVyLWFuZC1ob21lb3BhdGh5LXRyZWF0bWVudC8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImRyaG9tZW8uY29tOiA3IEJlc3QgSG9tZW9wYXRoaWMgTWVkaWNpbmVzIGZvciBGZXZlcjsgRHIuIFZpa2FzIFNoYXJtYSwgTUQiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuaGVhbHRobGluZS5jb20vaGVhbHRoL2JyeW9uaWEiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImhlYWx0aGxpbmUuY29tOiBXaGF0IElzIEJyeW9uaWEgYW5kIFNob3VsZCBZb3UgVXNlIEl0PyBbUHVycG9ydGVkIEJlbmVmaXRzLCBhbmQgUG90ZW50aWFsIFNpZGUgRWZmZWN0c107IEthdGhyeW4gV2F0c29uLCBNZWRpY2FsbHkgcmV2aWV3ZWQgYnkgTmF0YWxpZSBCdXRsZXIsIFJELCBMRDsgSmFuIDE3LCAyMDIwIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LmRvY3RvcnNoZWFsdGhwcmVzcy5jb20vZ2VuZXJhbC1oZWFsdGgtYXJ0aWNsZXMvaG9tZW9wYXRoaWMtcmVtZWRpZXMtY291Z2hzLWFuZC1jb2xkcy8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRvY3RvcnMgSGVhbHRoIFByZXNzOiAxMCBIb21lb3BhdGhpYyBSZW1lZGllcyB0byBGaWdodCBDb3VnaHMgYW5kIENvbGRzOyBKb24gWWFuZWZmLCBDTlA7IE9jdCAxMiwgMjAxNSIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5heXVzaC5nb3YuaW4vZG9jcy9ob21lb3BhdGh5LWd1aWRlbGluZXMucGRmIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJHVUlERUxJTkVTIGZvciBIT01PRU9QQVRISUMgUFJBQ1RJVElPTkVSUyBmb3IgQ09WSUQgMTk7IEdvdmVybm1lbnQgb2YgSW5kaWEsIE1pbmlzdHJ5IG9mIEFZVVNIIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LnN0dWRvY3UuY29tL2luL2RvY3VtZW50L2thcm5hdGFrYS1zdGF0ZS1sYXctdW5pdmVyc2l0eS9lbnZpcm9ubWVudGFsLWxhdy9jb3JvbmEtaGFuZGJvb2stanVseTIwMjAvMTAzODYzMDIiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBib29rIENvcm9uYS1IYW5kYm9vaywgYXZhaWxhYmxlIGFzIGEgZG93bmxvYWRhYmxlIFBERiwgYXR0cmlidXRlZCB0byBob2xpc3RpYyBoZWFsdGhjYXJlIGFkdm9jYXRlcyBhbmQgZm9vZCBzY2llbnRpc3RzIERycy4gS2hhZGFyIFZhbGkgYW5kIFNhcmFsYSBLaGFkYXIsIHByZXBhcmVkIGJ5IHRoZSBncm91cCBEci4gS2hhZGFyIFZhbGkgTGlmZXN0eWxlLCBiYXNlZCBvbiB0aGUgdmlkZW8gcHJlc2VudGF0aW9ucyBvZiBEci4gS2hhZGFyIFZhbGksIGtub3duIGFzIHRoZSBNaWxsZXQgTWFuIG9mIEluZGlhIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8yLXEtYXNwaWRvc3Blcm1hLW1vdGhlci10aW5jdHVyZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzItcS1hc3BpZG9zcGVybWEtbW90aGVyLXRpbmN0dXJlIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDIuICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5yZXNlYXJjaGdhdGUubmV0L3B1YmxpY2F0aW9uLzM0MTM0MjgxMl9Ccm9uY2hpYWxfQXN0aG1hX0FuZF9Bc3BpZG9zcGVybWEtX0FfU3R1ZHlfSW5fNTBfUGF0aWVudHMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUSBBc3BpZG9zcGVybWEiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIE1vdGhlciBUaW5jdHVyZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJvYmplY3RpdmUtMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjb2JqZWN0aXZlLTIiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE9iamVjdGl2ZToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkluY3JlYXNlIGJsb29kIG94eWdlbiBsZXZlbHMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInN5c3RlbS0yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzeXN0ZW0tMiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3lzdGVtOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiSG9tZW9wYXRoeSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY2FuLWJlLXVzZWQtYWxvbmdzaWRlLW90aGVyLWFsbG9wYXRoaWMtdHJlYXRtZW50cy0yIiB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjY2FuLWJlLXVzZWQtYWxvbmdzaWRlLW90aGVyLWFsbG9wYXRoaWMtdHJlYXRtZW50cy0yIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgQ2FuIGJlIHVzZWQgYWxvbmdzaWRlIG90aGVyIGFsbG9wYXRoaWMgdHJlYXRtZW50czoiKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlByZXN1bWFibHkiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInN0YXR1cy1vZi1hdXRob3Jpc2F0aW9uLTIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3N0YXR1cy1vZi1hdXRob3Jpc2F0aW9uLTIiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3RhdHVzIG9mIGF1dGhvcmlzYXRpb246IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJDb252ZW50aW9uYWwgaG9tZW9wYXRoeSBkcnVnLCByZWNvbW1lbmRlZCBieSBwaHlzaWNpYW5zIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInByb3RvY29sLWFuZC10cmVhdG1lbnQtYXBwcm9hY2gtMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcHJvdG9jb2wtYW5kLXRyZWF0bWVudC1hcHByb2FjaC0yIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByb3RvY29sIGFuZCB0cmVhdG1lbnQgYXBwcm9hY2g6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIldoZW4gb3h5Z2VuIGxldmVsIGZhbGxzLCBkcmluayBhIHNvbHV0aW9uIG9mIDIwIGRyb3BzIG9mIEFzcGlkb3NwZXJtYSBRIGluIDEvNCB0byAxIGN1cCBvZiB3YXRlciwgYW5kIG94eWdlbiBsZXZlbCBpbiB0aGUgYmxvb2Qgd291bGQgcmlzZSBpbW1lZGlhdGVseS4gQ291bGQgYmUgZHJ1bmsgIGFib3V0IHRocmVlIHRpbWVzIGEgZGF5IHRvIG1haW50YWluIG94eWdlbiBsZXZlbHMuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXNwaWRvc3Blcm1hIGlzIHZlcnkgd2VsbCBpbmRpY2F0ZWQgZm9yIGFzdGhtYSBhbmQgY29uZGl0aW9ucyBvZiB0aGUgbG93ZXIgcmVzcGlyYXRvcnkgdHJhY3QuIERvY3RvcnMgYWxzbyByZWNvbW1lbmQgaXQgdG8gbG9vc2VuIGNoZXN0IGNvbmdlc3Rpb24gYW5kIGFzIGEgcmVzcGlyYXRvcnkgdHJhY3Qgc3RpbXVsYW50IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlRoZSBtZWRpY2luZSBpcyBzb3VyY2VkIGZyb20gUXVlYnJhY2hvIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBhbiBldmVyZ3JlZW4gdHJlZSBuYXRpdmUgdG8gU291dGggQW1lcmljYSB0aGF0IGdyb3dzIHVwIHRvIDMwIG1ldGVycy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXNwaWRvc3Blcm1hIFEgLSBpcyBvbmUgb2YgdGhlIGJlc3QgcmVtZWRpZXMgZm9yIENPUEQgKENocm9uaWMgb2JzdHJ1Y3RpdmUgcHVsbW9uYXJ5IGRpc2Vhc2UsIGEgY2hyb25pYyBpbmZsYW1tYXRvcnkgbHVuZyBkaXNlYXNlKSBhbmQgaXQgaXMgY29uc2lkZXJlZCBhIHRvbmljIGZvciBsdW5ncy4gQXNwaWRvc3Blcm1hIHJlbW92ZXMgdGVtcG9yYXJ5IG9ic3RydWN0aW9uIHRvIHRoZSBveGlkYXRpb24gb2YgYmxvb2QgYnkgc3RpbXVsYXRpbmcgcmVzcGlyYXRvcnkgY2VudGVycy4gQW5vdGhlciBndWlkaW5nIHN5bXB0b20gaXMgd2FudCBvZiBicmVhdGggZHVyaW5nIGV4ZXJ0aW9uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFzcGlkb3NwZXJtYSBpcyBjb25zaWRlcmVkIGFzIHRoZSBkaWdpdGFsaXMgb2YgbHVuZ3MuIFJlbW92ZXMgdGVtcG9yYXJ5IG9ic3RydWN0aW9uIHRvIHRoZSBveGlkYXRpb24gb2YgdGhlIGJsb29kIGJ5IHN0aW11bGF0aW5nIHJlc3BpcmF0b3J5IGNlbnRlcnMsIGluY3JlYXNpbmcgb3hpZGF0aW9uIGFuZCBleGNyZXRpb24gb2YgY2FyYm9uaWMgYWNpZC4gSXQgaXMgdmVyeSB1c2VmdWwgZm9yIGNhcmRpYWMgYXN0aG1hLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ0eXBpY2FsLWR1cmF0aW9uLW9mLXRyZWF0bWVudC0yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN0eXBpY2FsLWR1cmF0aW9uLW9mLXRyZWF0bWVudC0yIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFR5cGljYWwgZHVyYXRpb24gb2YgdHJlYXRtZW50OiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJWQUNBTlQiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAib3V0Y29tZS0yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNvdXRjb21lLTIiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE91dGNvbWU6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJJbmNyZWFzZWQgYmxvb2Qgb3h5Z2VuIGxldmVscyIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic2lnbmlmaWNhbnQtc2lkZS1lZmZlY3RzLTIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NpZ25pZmljYW50LXNpZGUtZWZmZWN0cy0yIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNpZ25pZmljYW50IHNpZGUgZWZmZWN0czoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTm9uZSBrbm93bi4gSG93ZXZlciBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIG1lZGljYXRpb24gdW5kZXIgdGhlIGd1aWRhbmNlIG9mIGEgY29tcGV0ZW50IGhvbWVvcGF0aC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicmVjb21tZW5kZWQtcXVhbnRpdHktZm9yLXN0b2NraW5nLTIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JlY29tbWVuZGVkLXF1YW50aXR5LWZvci1zdG9ja2luZy0yIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlY29tbWVuZGVkIHF1YW50aXR5IGZvciBzdG9ja2luZzoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiVkFDQU5UIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInByaWNlLTIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3ByaWNlLTIiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUHJpY2U6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJScy4gOTAtMjAwIG9ubGluZSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic3VnZ2VzdGVkLXN1cHBsaWVycy0yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdWdnZXN0ZWQtc3VwcGxpZXJzLTIiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3VnZ2VzdGVkIHN1cHBsaWVyczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cDovL2hvbWVvbWFydC5jb20vIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJob21lb21hcnQuY29tOiBBc3BpZG9zcGVybWEgUXVlYnJhY2hvIEhvbWVvcGF0aHkgTW90aGVyIFRpbmN0dXJlIFEiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAoSU5SIDMxMCkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZnVydGhlci1yZWZlcmVuY2VzLTIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Z1cnRoZXItcmVmZXJlbmNlcy0yIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZ1cnRoZXIgcmVmZXJlbmNlczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cucHJhY3RvLmNvbS9oZWFsdGhmZWVkL2hvbWVvcGF0aGljLXJlbWVkaWVzLWZvci1hc3RobWEtMjY4OTMvcG9zdCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAicHJhY3RvLmNvbTogSG9tZW9wYXRoaWMgUmVtZWRpZXMgZm9yIEFzdGhtYTsgRHIuIEphZ2F0IFNoYWgiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9ob21lb21hcnQuY29tL3Byb2R1Y3RzL2FzcGlkb3NwZXJtYS1xdWVicmFjaG8tbW90aGVyLXRpbmN0dXJlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJob21lb21hcnQuY29tOiBBc3BpZG9zcGVybWEgUXVlYnJhY2hvIEhvbWVvcGF0aHkgTW90aGVyIFRpbmN0dXJlIFEiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cucmVzZWFyY2hnYXRlLm5ldC9wdWJsaWNhdGlvbi8zNDEzNDI4MTJfQnJvbmNoaWFsX0FzdGhtYV9BbmRfQXNwaWRvc3Blcm1hLV9BX1N0dWR5X0luXzUwX1BhdGllbnRzIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJyZXNlYXJjaGdhdGUubmV0OiBCcm9uY2hpYWwgQXN0aG1hIEFuZCBBc3BpZG9zcGVybWEtIEEgU3R1ZHkgSW4gNTAgUGF0aWVudHM7IFN1a3JpdGkgZXQgYWwuOyBNYXksIDIwMjAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuc2Fya2FyaXRlbC5jb20vYXNwaWRvc3Blcm1hLWVmZmVjdGl2ZS1idXQtbm90LWEtc3Vic3RpdHV0ZS1vZi1veHlnZW4tc2F5cy1kci1hLWstZ3VwdGEvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJzYXJrYXJpdGVsLmNvbTogQXNwaWRvc3Blcm1hIEVmZmVjdGl2ZSBidXQgTm90IGEgU3Vic3RpdHV0ZSBvZiBPeHlnZW4gU2F5cyBEci5BLksuR3VwdGE7IEFtZXlhIFNhdGhheWU7IEFwcmlsIDI5LCAyMDIxIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiXzMtZHIta2hhZGFyLXZhbGktcy1jb3ZpZC0xOS10cmVhdG1lbnQtcHJvdG9jb2wiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNfMy1kci1raGFkYXItdmFsaS1zLWNvdmlkLTE5LXRyZWF0bWVudC1wcm90b2NvbCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIDMuICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9tYW5hdmF0YS5vcmcva2hhZGVydmFsaS8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkRyLiBLaGFkYXIgVmFsaSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIncyBDb3ZpZC0xOSB0cmVhdG1lbnQgcHJvdG9jb2wiKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAib2JqZWN0aXZlLTMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI29iamVjdGl2ZS0zIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBPYmplY3RpdmU6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlByb3BoeWxhY3RpYyB0cmVhdG1lbnQsIGN1cmF0aXZlIHRyZWF0bWVudCBmb3IgaW5mZWN0aW9uLCBwb3N0LWluZmVjdGlvbiB0cmVhdG1lbnQgZm9yIGxvbmcgQ292aWQsIHRyZWF0bWVudCB0byBwcmV2ZW50IHBvc3QtdmFjY2luZSBzeW1wdG9tcyIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJzeXN0ZW0tMyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3lzdGVtLTMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN5c3RlbToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkhvbWVvcGF0aHkiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogeyBpZDogImNhbi1iZS11c2VkLWFsb25nc2lkZS1vdGhlci1hbGxvcGF0aGljLXRyZWF0bWVudHMtMyIgfSwKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2Nhbi1iZS11c2VkLWFsb25nc2lkZS1vdGhlci1hbGxvcGF0aGljLXRyZWF0bWVudHMtMyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIENhbiBiZSB1c2VkIGFsb25nc2lkZSBvdGhlciBhbGxvcGF0aGljIHRyZWF0bWVudHM6IiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIGJlc3Qgbm90IHRvIGFkb3B0IGEgaG9tZW9wYXRoeSB0cmVhdG1lbnQgcHJvdG9jb2wgd2hpbGUgZm9sbG93aW5nIGFuIGFsbG9wYXRoaWMgcHJvdG9jb2wsIGV4Y2VwdCBpbiB0aGUgY2FzZSBvZiBhbGxvcGF0aGljIG1lZGljYXRpb25zIGZvciBjaHJvbmljIGlsbG5lc3NlcyBsaWtlIGRpYWJldGVzIG9yIGh5cGVydGVuc2lvbiBIb3dldmVyIGl0IG1heSBiZSBhY2NlcHRhYmxlIHRvIHN3aXRjaCB0byBhIGhvbWVvcGF0aGljIHByb3RvY29sIGZyb20gYW4gYWxsb3BhdGhpYyB0cmVhdG1lbnQgcHJvdG9jb2wsIHNob3VsZCBhIHBhdGllbnQgd2lzaCB0byBkbyBzby4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic3RhdHVzLW9mLWF1dGhvcmlzYXRpb24tMyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3RhdHVzLW9mLWF1dGhvcmlzYXRpb24tMyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTdGF0dXMgb2YgYXV0aG9yaXNhdGlvbjoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSG9tZW9wYXRoaWMgdHJlYXRtZW50IGZvciBDb3ZpZCB3YXMgcmVjb2duaXplZCBieSB0aGUgS2VyYWxhIGdvdmVybm1lbnQgaW4gdmFyaW91cyB3YXlzLCBhbmQgaG9tZW9wYXRoaWMgcHJvcGh5bGFjdGljIG1lZGljaW5lIGhhcyBiZWVuIG1hc3MtZGlzdHJpYnV0ZWQgdGhlcmUgc2luY2UgZWFybHkgaW4gdGhlIHBhbmRlbWljLiBUaGVyZSBpcyBzdWJzdGFudGlhbCBldmlkZW5jZSBmb3IgaG9tZW9wYXRoaWMgcHJvcGh5bGF4aW5nLlxuIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LmhvbWVvYm9vay5jb20vY29tYmF0aW5nLWNvdmlkLTE5LWtlcmFsYS1nb3Z0LWRpc3RyaWJ1dGVzLWhvbWVvcGF0aHktbWVkaWNpbmUtdG8tNDUtbGFraC1wZW9wbGUtYWNyb3NzLXRoZS1zdGF0ZS8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkNvbWJhdGluZyBDT1ZJRC0xOTogS2VyYWxhIGdvdmVybm1lbnQgZGlzdHJpYnV0ZXMgSG9tZW9wYXRoeSBtZWRpY2luZSB0byA0NSBsYWtoIHBlb3BsZSBhY3Jvc3MgdGhlIFN0YXRlIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBwcm90b2NvbCBkZXNjcmliZWQgaGVyZSBpcyByZXB1dGVkIHRvIGJlIHVzZWQgZWZmZWN0aXZlbHkgaW4gRHIuIEtoYWRlciBWYWxpJ3MgcHJhY3RpY2UsIHdoaWNoIGVtcGhhc2l6ZXMgYSBtaWxsZXQtYmFzZWQgZGlldDsgRHIuIFZhbGkgaXMgdGhlIGhpZ2hseSBlc3RlZW1lZCBNaWxsZXQgTWFuIG9mIEluZGlhLCB3aG8gaGFzIHN1Y2Nlc3NmdWxseSBhZHZvY2F0ZWQgYSBkaWV0IGJhc2VkIG9uIG1pbGxldHMgb3IgU2lydWRoYWFueWEgZm9yIGltcHJvdmVkIGltbXVuaXR5IGFnYWluc3QgYWxsIGRpc2Vhc2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInByb3RvY29sLWFuZC10cmVhdG1lbnQtYXBwcm9hY2gtMyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcHJvdG9jb2wtYW5kLXRyZWF0bWVudC1hcHByb2FjaC0zIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByb3RvY29sIGFuZCB0cmVhdG1lbnQgYXBwcm9hY2g6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigiUHJlY2F1dGlvbmFyeSBtZWFzdXJlcyBmb3IgcHJvcGh5bGF4aXMgb3IgcHJldmVudGlvbjoiKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSG9tZW9wYXRoaWMgbWVkaWNpbmVzIGZvciBpbW1lZGlhdGUgYW5kIHNob3J0LXRlcm0gaW1tdW5pdHk6IgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KCJCcnlvbmlhIChBbGJhKSAyMDAsIFJodXMgdG94aWNvZGVuZHJvbiAoUmh1cyB0b3gpIDIwMCIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiXG5UYWtlIDMgcGlsbHMgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIihmb3IgYWR1bHRzKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBvZiBlYWNoIG9mIHRoZXNlIG1lZGljaW5lcywgZGlzc29sdmUgaW4gaGFsZiBhIGdsYXNzIG9mIHdhdGVyLCBhbmQgY29uc3VtZSBhcyBmYXIgYXMgcG9zc2libGUgYXdheSBmcm9tIG1lYWxzLCBpLmUuLCBhdCBsZWFzdCBoYWxmIGFuIGhvdXIgYmVmb3JlIGEgbWFpbiBtZWFsLiBSZXBlYXQgdGhlIGRvc2FnZSAyIHRpbWVzIGEgZGF5LCBtb3JuaW5nIGFuZCBldmVuaW5nLCBmb3IgMyBkYXlzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoIkF5dXJ2ZWRpYyBTYXB0YXBhdHJhIEthc2hhYXlhcyBmb3IgbG9uZy10ZXJtIGltbXVuaXR5OiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbk9uZSBjYW4gZW5qb3kgYW4gZXZlcmxhc3RpbmcgaW1tdW5pdHkgYnkgY29uc3VtaW5nIFNhcHRhcGF0cmEgS2FzaGF5YXMgb25jZSBpbiBldmVyeSA2IG1vbnRocyBhbmQgU2lyaWRoYW55YSBvciBtaWxsZXQgZ3JhaW5zIGFzIHN0YXBsZSBmb29kLlxuUHJlcGFyZSBhIEthc2hhYXlhIG9mIGVhY2ggb2YgdGhlIDcgbGVhdmVzIGxpc3RlZCBiZWxvdywgb25lIGF0IGEgdGltZSwgYW5kIGNvbnN1bWUgaXQgZm9yIDIgY29uc2VjdXRpdmUgZGF5cy4gVGhpcyBwcm9jZXNzIHdvdWxkIHRha2UgNyB4IDIgPSAxNCBkYXlzLiBUaGVuIHJlaXRlcmF0ZSB0aGUgY3ljbGUgZm9yIHRoZSBuZXh0IDE0IGRheXMsIGFuZCByZXBlYXQgdGhlIGVudGlyZSByZWdpbWVuIGV2ZXJ5IHNpeCBtb250aHMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigiVGhlIDcgbGVhdmVzIG9mIHRoZSBTYXB0YXBhdHJhIEthc2hhYXlhIGFyZSBhcyBmb2xsb3dzOiIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkJlcm11ZGEgZ3Jhc3MgLyBDeW5vZG9uIGRhY3R5bG9uIC8gRGhydXZhIG9yIER1cnZhIGdyYXNzIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSG9seSBiYXNpbCAvIE9jaW11bSB0ZW51aWZsb3J1bSAvIE9jaW11bSBzYW5jdHVtIC8gVHVsYXNpIG9yIFR1bHNpIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkdpbG95IC8gVGlub3Nwb3JhIGNvcmRpZm9saWEgLyBBbXJ1dGF2YWxsaSBvciBHdWR1Y2hpIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQmVuZ2FsIHF1aW5jZSBvciBzdG9uZSBhcHBsZSBvciB3b29kIGFwcGxlIC8gQWVnbGUgTWFybWVsb3MgLyBCYWVsIG9yIEJpbHZhIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbmRpYW4gYmVlY2ggLyBQb25nYW1pYSBwaW5uYXRhIC8gUG9vbmdhIG9yIEthcmFuamEgb3IgS2FydW0iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk5lZW0gLyBBemFkaXJhY2h0YSBpbmRpY2EiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNhY3JlZCBmaWcgLyBGaWN1cyByZWxpZ2lvc2EgLyBQZWVwYWwiKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTdHJ1Y3R1cmVkIHdhdGVyIGFuZCBpdHMgcHJlcGFyYXRpb246IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5TdHJ1Y3R1cmVkIHdhdGVyIGlzIHdhdGVyIGluIHdoaWNoIHRoZSBtb2xlY3VsZXMgYXJlIG9yZ2FuaXplZCBvciBzdHJ1Y3R1cmVkIGxvb3NlbHkgYXJvdW5kIGh5ZHJvcGhpbGljIGNvcmVzLCBvciB3YXRlciBtb2xlY3VsYXIgYXJyYW5nZW1lbnQgdGhhdCByZXRhaW5zIG1lbW9yeSBvZiBpdHMgZW52aXJvbm1lbnQuIFN0cnVjdHVyZWQgd2F0ZXIgaXMgY2xhaW1lZCB0byBoYXZlIGhlYWxpbmcgcHJvcGVydGllcy4gRHIuIFZhbGkgcmVjb21tZW5kcyB0byBjcmVhdGUgc3RydWN0dXJlZCB3YXRlciBieSBpbW1lcnNpbmcgYSBjb3BwZXIgcGxhdGUgaW4gYSBtdWQgb3Igc3RlZWwgdmVzc2VsIGZpbGxlZCB3aXRoIHdhdGVyIGZvciA3IGhvdXJzIG9yIG92ZXJuaWdodC4gVGhlIHdhdGVyIHRodXMgcHJlcGFyZWQgaXMgc2FpZCB0byBoYXZlIGhlYWxpbmcgcHJvcGVydGllcyBhbmQgY2FuIGJlIHVzZWQgZm9yIGNvb2tpbmcgYW5kIGRyaW5raW5nLiBUaGUgY29wcGVyIHBsYXRlIHVzZWQgbXVzdCBiZSBjbGVhbmVkIGRhaWx5IHdpdGggdGFtYXJpbmQgd2F0ZXIgb3IgbGVtb24gYW5kIHNhbHQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlByZXBhcmF0aW9uIG9mIEthc2hhYXlhOiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuVGhlIEthc2hhYXlhIG9yIG1lZGljaW5hbCBkZWNvY3Rpb24gc2hvdWxkIGlkZWFsbHkgYmUgcHJlcGFyZWQgZnJvbSBmcmVzaCBsZWF2ZXMuIEhhbGYgYSBmaXN0ZnVsIG9mIHNtYWxsIGxlYXZlcyBvciAzLTQgYmlnIGxlYXZlcyBzaG91bGQgYmUgc3VmZmljaWVudCBmb3IgYSBkYXkncyBkb3NhZ2UuIElmIHRoZSBsZWF2ZXMgYXJlIGJvdWdodCBmcm9tIG91dHNpZGUsIHRoZW4gdGhleSBzaG91bGQgZmlyc3QgYmUgcHVyZ2VkIG9mIHBlc3RpY2lkZXMgdGhyb3VnaCBhIHN1aXRhYmxlIG1ldGhvZCBzdWNoIGFzIHNvYWtpbmcgZm9yIDEwIG1pbnV0ZXMgaW4gMiAlIHNhbHQgd2F0ZXIgc29sdXRpb24sIHRob3VnaCB0aGUgbWV0aG9kIHN1Z2dlc3RlZCBpbiB0aGUgcHJvdG9jb2wgaXMgdG8gc29hayBmb3IgMTAgbWludXRlcyBpbiBhIHRhbWFyaW5kIHdhdGVyIHNvbHV0aW9uICgyMCBnIHRhbWFyaW5kIHNxdWVlemVkIGluIDMgbGl0cmVzIG9mIHN0cnVjdHVyZWQgd2F0ZXIpLCBhbmQgbGF0ZXIgcmluc2Ugb2ZmIHRoZSBzb2FrZWQgbGVhdmVzIGluIHN0cnVjdHVyZWQgd2F0ZXIuIFRvIHByZXBhcmUgdGhlIEthc2hhYXlhLCBicmluZyAyMDAgbWwgb2Ygc3RydWN0dXJlZCB3YXRlciB0byBib2lsLCBhZGQgdGhlIGxlYXZlcyB0byB0aGUgYm9pbGluZyB3YXRlciwgYW5kIGxvd2VyIHRoZSBmbGFtZSB0byBzaW1tZXIgdGhlIHdhdGVyIGZvciAyLTMgbWludXRlcyBiZWZvcmUgc3dpdGNoaW5nIG9mZiB0aGUgZmxhbWUuIENvdmVyIHRoZSBLYXNoYWF5YSB3aXRoIGEgbGlkIGFuZCBhbGxvdyBpdCB0byBjb29sIGZvciBhIGZldyBtaW51dGVzLiBBZGQgcGFsbSBqYWdnZXJ5IHN5cnVwIGlmIHJlcXVpcmVkLCBhbmQgY29uc3VtZSBpdCBsdWtld2FybS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTWV0aG9kIG9mIHByZXBhcmF0aW9uIG9mIEFtYmFsaToiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3lvdXR1LmJlL2dPV2VCalVmUmpJIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkFtYmFsaSBwcmVwYXJhdGlvbiByZWNpcGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJHcmluZCByZXF1aXJlZCBxdWFudGl0eSBvZiBhIHdob2xlIGdyYWluIG1pbGxldCBmb3IgMiBzZWNvbmRzIGluIGEgYmxlbmRlciB1c2luZyB0aGUgV2hpcCBtb2RlLiBUaGVuIHdhc2ggdGhlIGZsb3VyIGluIHN1ZmZpY2llbnQgd2F0ZXIgYW5kIGRyYWluIG9yIGZpbHRlciBvZmYgdGhlIHdhdGVyLiBTb2FrZWQgdGhlIHdhc2hlZCBicm9rZW4gbWlsbGV0IGdyYWlucyBmb3IgOCBob3VycyBpbiBzdWZmaWNpZW50IHF1YW50aXR5ICgyLjUgdG8gMyB0aW1lcyB0aGUgdm9sdW1lIG9mIGZsb3VyKSBvZiBzdHJ1Y3R1cmVkIHdhdGVyLCB0byBzb2Z0ZW4gdGhlIGZpYnJlLiBUaGVuIGJvaWwgdGhlIGJyb2tlbiBncmFpbnMgaW4gdGhlIHNhbWUgd2F0ZXIsIGluIGFuIG9wZW4gbXVkIHBvdCwgdW50aWwgdGhlIGdyYWlucyBhcmUgY29va2VkLiBBZnRlciBjb29raW5nLCBjbG9zZSB0aGUgbXVkIHBvdCB3aXRoIGEgY2xlYW4gY290dG9uIGNsb3RoIGFuZCBsZWF2ZSB0byBmZXJtZW50IGZvciA4IGhvdXJzLiBBZGQgc2FsdCB0byB0YXN0ZSBiZWZvcmUgZWF0aW5nLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJEaWV0YXJ5IHJlZ2ltZW46IildKSwKICAgICAgICBfdm0uX3YoIlxuQ29uc3VtZSAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQW1iYWxpIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHByZXBhcmVkIGZyb20gb25lIG9mIHRoZSBTaXJ1ZGhhYW5peWEgb3IgbWlsbGV0cyBhdCBsZWFzdCBvbmNlIGEgZGF5LiBTdWJzZXF1ZW50bHkgb3RoZXIgbWlsbGV0IHByZXBhcmF0aW9ucyBjb3VsZCBiZSBjb25zdW1lZCBhcyB3ZWxsLiBUaGVyZSBpcyBldmlkZW5jZSB0aGF0IHNwcm91dGluZyBhbmQgZmVybWVudGF0aW9uIHJlZHVjZSB0aGUgY29udGVudCBvZiBhbnRpbnV0cmllbnRzIGluIHRoZSBtaWxsZXQgYnJhbi4gQWJzdGFpbiBmcm9tIHRlYSwgY29mZmVlLCBhbGNvaG9sIGFuZCBub252ZWdldGFyaWFuIGFuZCBpbmZsYW1tYXRvcnkgZm9vZHMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCItLVxuIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlJlY29tbWVuZGVkIHRyZWF0bWVudCBhbmQgZGlldCBmb3IgY29yb25hLXBvc2l0aXZlIHBhdGllbnRzOiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkhvbWVvcGF0aGljIG1lZGljaW5lIGZvciBhY3RpdmUgaW5mZWN0aW9uczoiKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBcnNlbmljdW0gYWxidW0gMjAwIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQnJ5b25pYSAoQWxiYSkgMjAwIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ2FtcGhvciAyMDAiKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTY2hlZHVsZSAoZm9yIGFkdWx0cyktIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG4zIHBpbGxzIGVhY2ggaW4gaGFsZiBjdXAgb2Ygd2F0ZXIsICwgYW5kIGNvbnN1bWUgYXMgZmFyIGFzIHBvc3NpYmxlIGF3YXkgZnJvbSBtZWFscyAoaS5lLiwgYXQgbGVhc3QgaGFsZiBhbiBob3VyIGJlZm9yZSBhIG1haW4gbWVhbCksIDQgdGltZXMgYSBkYXkgZm9yIHR3byBkYXlzLlxuTmV4dCAzIHRpbWVzIGEgZGF5IGZvciB0d28gZGF5cyxcbk5leHQgdHdpY2UgYSBkYXkgZm9yIHR3byBkYXlzLFxuVGhlbiBvbmNlIGEgZGF5IGZvciBhIHdlZWsuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1lYWwgcGxhbiBmb3IgY29yb25hLXBvc2l0aXZlIHBhdGllbnRzOiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuQ29uc3VtZSBvbmx5IEFtYmFsaSBtYWRlIGZyb20gbWlsbGV0cyBmb3IgYWxsIHRocmVlIG1lYWxzIG9mIHRoZSBkYXkuIE9uIHRoZSBmaXJzdCBkYXksIGhhdmUgb25seSBmb3h0YWlsIG1pbGxldCAoVGluYWkgaW4gVGFtaWwgLyBLb3JyYWx1IGluIFRlbHVndSkgQW1iYWxpLiBPbiB0aGUgc2Vjb25kIGRheSwgY29uc3VtZSBBbWJhbGkgcHJlcGFyZWQgZnJvbSBrb2RvIG1pbGxldCAoVmFyYWd1IGluIFRhbWlsIC8gQXJpa2VsdSBpbiBUZWx1Z3UpLCBhbmQgb24gdGhlIHRoaXJkIGRheSwgQW1iYWxpIGZyb20gbGl0dGxlIG1pbGxldCAoU2FhbWFpIGluIFRhbWlsIC8gU2FhbWFsdSBpbiBUZWx1Z3UpLiBUaGVyZWFmdGVyLCByZXBlYXQgdGhlIGN5Y2xlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJLYXNoYWF5YSByZWdpbWVuIGZvciBwYXRpZW50czoiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkNvbnN1bWUgS2FzaGFheWFzIHByZXBhcmVkIGZyb20gdGhlIGZvbGxvd2luZyBtZWRpY2luYWwgbGVhdmVzIGF0IHRoZSBmb2xsb3dpbmcgcHJlc2NyaWJlZCB0aW1pbmdzOlxuTWVkaWNpbmFsIGxlYXZlcy0iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJKYXBhbmVzZSBtdWd3b3J0IC8gQXJ0ZW1lc2lhIHZ1bGdhcmlzIC8gTWFjaGkgcGF0cmFtLCIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk5pZ2h0IGphc21pbmUgLyBOeWN0YW50aGVzIGFyYm9yLXRyaXN0aXMgLyBQYWFyaWphYXRhIC8gUGF2aXpoYW1hbGxpLCIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJHaWxveSAvIFRpbm9zcG9yYSBjb3JkaWZvbGlhIC8gQW1ydXRhdmFsbGkgLyBHdWR1Y2hpIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkthc2hhYXlhIHRpbWluZ3M6XG42IEFNLSAgTWFjaGkgcGF0cmFtO1xuOSBBTS0gIFBhdml6aGFtYWxsaTtcbjEyIFBNLSAgQW1ydXRhdmFsbGkgb3IgR2lsb3k7XG4zIFBNLSAgTWFjaGkgcGF0cmFtO1xuNiBQTS0gIFBhdml6aGFtYWxsaTtcbjkgUE0tIEFtcnV0YXZhbGxpIG9yIEdpbG95IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk1lYXN1cmVzIHRvIGJlIGZvbGxvd2VkIGJ5IHRob3NlIHdobyBoYXZlIGNvbXBsZXRlZCAyIGN5Y2xlcyBvZiBTYXB0YXBhdHJhIEthc2hhYXlhLCBhbmQgYWxzbyBwYXRpZW50cyByZWNvdmVyZWQgZnJvbSBDb3ZpZC0xOToiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkNvbnN1bWUgb25seSBBbWJhbGkgcHJlcGFyZWQgZnJvbSB0aGVzZSA1IG1pbGxldHMgZm9yIGFsbCB0aHJlZSBtZWFscywgd2l0aCBlYWNoIG1pbGxldCBiZWluZyBleGNsdXNpdmVseSBlYXRlbiBvbiAyIGNvbnNlY3V0aXZlIGRheXMuIFRoZSA1IG1pbGxldHMgYXJlIGFzIGZvbGxvd3M6XG5Gb3h0YWlsIG1pbGxldCAoVGluYWkpLCBLb2RvIG1pbGxldCAoVmFyYWd1KSwgTGl0dGxlIG1pbGxldCAoU2FhbWFpKSwgQmFybnlhcmQgbWlsbGV0IChLdXRoaXJhdmFhbGkgaW4gVGFtaWwgLyBPZGFsdSBpbiBUZWx1Z3UpLCBCcm93bnRvcCBtaWxsZXQgKFBhbGEgcHVsIGluIFRhbWlsIC8gS29ycmFsdSBpbiBUZWx1Z3UpIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSAzIEthc2hhYXlhcyB0byBiZSBjb25zdW1lZCwgbW9ybmluZyBhbmQgZXZlbmluZywgZm9yIDkgd2Vla3MsIHdpdGggZWFjaCBLYXNoYWF5YSBjb25zdW1lZCBleGNsdXNpdmVseSB0d2ljZSBhIGRheSBmb3IgMyBjb25zZWN1dGl2ZSBkYXlzIGVhY2gsIGJlZm9yZSBjb21tZW5jaW5nIHRoZSBuZXh0IG9uZTpcbkphcGFuZXNlIG11Z3dvcnQgLyBNYWNoaSBwYXRyYW0sIE5pZ2h0IGphc21pbmUgLyBQYXZpemhhbWFsbGksIEdpbG95IC8gQW1ydXRhdmFsbGkiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGFrZSBpbiB0aGUgb2NocmUgcmF5cyBvZiBzdW5saWdodCBhdCBzdW5yaXNlIGFuZCBzdW5zZXQgZXZlcnkgZGF5IGZvciBhdCBsZWFzdCAxNSBtaW51dGVzIGVhY2gsIGZvciB2aXRhbWluIEQuIFRha2UgZm9vZHMgcmljaCBpbiB2aXRhbWluIEMsIGxpa2UgZ3VhdmEsIGNpdHJ1cyBmcnVpdHMsIGdvb3NlYmVycnkgb3IgQW1sYSwgcGFwYXlhLCBwaW5lYXBwbGUsIGFuZCB2ZWdldGFibGVzIGxpa2UgY2Fwc2lzdW0sIGdyZWVuIGxlYWZ5IHZlZ2V0YWJsZXMsIHRvbWF0b2VzIGV0Yy4gRWF0IG9ubHkgaG9tZW1hZGUgcGlja2xlcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiR2VuZXJhbCBwcmVjYXV0aW9ucyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIjogV2VhciBtYXNrcyB3aGVuIHZpc2l0aW5nIGNyb3dkZWQgcGxhY2VzIGFuZCBwcmFjdGlzZSBzb2NpYWwgZGlzdGFuY2luZyBpbiBzdWNoIHBsYWNlcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIi0tXG4iKSwKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSG9tZW9wYXRoaWMgbWVkaWNpbmUgYWZ0ZXIgdmFjY2luYXRpb24gdG8gbWl0aWdhdGUgYWR2ZXJzZSBlZmZlY3RzOiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1hbmNpbmVsbGEgMjAwIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiVGh1amEgMjAwIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU2NoZWR1bGUtIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG4zIHBpbGxzIGVhY2ggaW4gaGFsZiBjdXAgb2Ygd2F0ZXIsIFR3aWNlIGEgZGF5IGZvciA0IGRheXMsIGF3YXkgZnJvbSBmb29kIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiU29tZSBwcmluY2lwbGVzIG9mIGhvbWVvcGF0aGljIHRyZWF0bWVudCwgYXMgYWR2aXNlZCBieSBhIHByYWN0aXNpbmcgaG9tZW9wYXRoOiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuSG9tZW9wYXRocyBhZG1pbmlzdGVyIHN5bXB0b21hdGljIHRyZWF0bWVudCB0aGF0IGlzIG5vbmV0aGVsZXNzIHRhaWxvcmVkIHRvIHRoZSBwaHlzaW9sb2dpY2FsIGNvbnRleHQgb2YgdGhlIGluZGl2aWR1YWwgcGF0aWVudC4gVGh1cyBpbiBob21lb3BhdGh5LCB0aGUgc2FtZSBzeW1wdG9tcyBtYXkgbm90IGJlIHByZXNjcmliZWQgdGhlIHNhbWUgcmVtZWR5IGluIGRpZmZlcmVudCBwYXRpZW50cy4gSW4gdGhlIGNhc2Ugb2YgdGhlIHdpZGVseSBwcmVzY3JpYmVkIGFuZCBwcm92ZW4gcHJvcGh5bGFjdGljIEFyc2FsYiAzMCBDLCBwZXJoYXBzIHRoZSB1bmRlcmx5aW5nIHJlYXNvbiBmb3IgaXRzIGVmZmljYWN5IGlzIGR1ZSB0byBhIGNvbW1vbiBnbG9iYWwgY29udGV4dCBjcmVhdGVkIGJ5IHRoZSBwYW5kZW1pYy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9yIHRoaXMgcmVhc29uICh0aGF0IHRyZWF0bWVudCBtb2RhbGl0aWVzIGFyZSB0YWlsb3JlZCBhbHNvIHRvIHRoZSBpbmRpdmlkdWFsIGFuZCBub3QgbWVyZWx5IHRvIHN5bXB0b21zKSwgaXQgaXMgYWR2aXNhYmxlIHRvIHZpc2l0IGEgaG9tZW9wYXRoIGluIHBlcnNvbiB3aGVuIHRoZXJlIGlzIGFuIGFpbG1lbnQuIEhvd2V2ZXIsIGluIHRoZSBjYXNlIG9mIHRoZSBjdXJyZW50IHByZXNjcmlwdGlvbiwgQnJ5b25pYSAyMDAgaXMga25vd24gdG8gcHJldmVudCBwbmV1bW9uaWEgYW5kIFJodXMgVG94IDIwMCBpcyBmb3IgYm9keSBhY2hlLiBUaGVzZSBhcmUgYWRtaW5pc3RlcmVkIGluIHRoZSBlYXJseSBzdGFnZSBvZiBhIGRpc2Vhc2UuIENhbXBob3IgMjAwIGlzIHVzZWQgdG8gdHJlYXQgZmV2ZXIsIHdoZW4gdGhlIHN5bXB0b20gaXMgcHJlc2VudC4gTGlrZSBhbGwgaG9tZW9wYXRoaWMgbWVkaWNhdGlvbiwgdGhleSBzaG91bGQgYmUgY29uc3VtZWQgYXQgbGVhc3QgaGFsZiBhbiBob3VyIGJlZm9yZSBhIG1haW4gbWVhbCwgYXMgZmFyIGFzIHBvc3NpYmxlIG9uIGFuIGVtcHR5IHN0b21hY2guIFRoZXJlIGFyZSBubyBlc3BlY2lhbCBkaWV0YXJ5IHByZWNhdXRpb25zIHRvIGJlIGZvbGxvd2VkLCBleGNlcHQgdG8gYWJzdGFpbiBmcm9tIGNvZmZlZSBhbmQgdGVhLCBhbmQgaWYgcG9zc2libGUsIG5vbnZlZ2V0YXJpYW4gZm9vZCwgYW5kIHRvIGVhdCBsaWdodCwgZWFzaWx5IGRpZ2VzdGlibGUgbWVhbHMgZHVyaW5nIGlsbG5lc3MuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInR5cGljYWwtZHVyYXRpb24tb2YtdHJlYXRtZW50LTMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3R5cGljYWwtZHVyYXRpb24tb2YtdHJlYXRtZW50LTMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVHlwaWNhbCBkdXJhdGlvbiBvZiB0cmVhdG1lbnQ6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCIxLTQgd2Vla3MiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm91dGNvbWUtMyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjb3V0Y29tZS0zIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBPdXRjb21lOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJDb3ZpZCBwcmV2ZW50aW9uLCByZXBvcnRlZCByZWxpZWYgZnJvbSBzeW1wdG9tcyBvZiBDb3ZpZCwgcG9zdC1Db3ZpZCwgYSBtZWFzdXJlIG9mIHJlbGllZiBmcm9tIHZhY2NpbmUgc2lkZSBlZmZlY3RzIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNpZ25pZmljYW50LXNpZGUtZWZmZWN0cy0zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzaWduaWZpY2FudC1zaWRlLWVmZmVjdHMtMyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTaWduaWZpY2FudCBzaWRlIGVmZmVjdHM6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJOb25lIHJlcG9ydGVkLCBvdmVyYWxsIGltcHJvdmVtZW50IG9mIGhlYWx0aCIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicmVjb21tZW5kZWQtcXVhbnRpdHktZm9yLXN0b2NraW5nLTMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JlY29tbWVuZGVkLXF1YW50aXR5LWZvci1zdG9ja2luZy0zIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlY29tbWVuZGVkIHF1YW50aXR5IGZvciBzdG9ja2luZzoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXJzYWxiIDMwIEMgaXMgYWR2aXNhYmxlIHRvIHN0b2NrIGZvciBzZXZlcmFsIG1vbnRocywgZXNwZWNpYWxseSBhcyB0aGUgbWVkaWNpbmUgaXMgdmVyeSBsb3ctcHJpY2VkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcmljZS0zIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwcmljZS0zIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFByaWNlOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZGlldGFyeSBmb29kIHN1cHBsaWVzIGFuZCBob21lb3BhdGhpYyBtZWRpY2luZSBhcmUgbG93LXByaWNlZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic3VnZ2VzdGVkLXN1cHBsaWVycy0zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdWdnZXN0ZWQtc3VwcGxpZXJzLTMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3VnZ2VzdGVkIHN1cHBsaWVyczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkxvY2FsIG9yIG9ubGluZSBob21lb3BhdGh5IHN0b3JlcyIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZnVydGhlci1yZWZlcmVuY2VzLTMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Z1cnRoZXItcmVmZXJlbmNlcy0zIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZ1cnRoZXIgcmVmZXJlbmNlczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuc3R1ZG9jdS5jb20vaW4vZG9jdW1lbnQva2FybmF0YWthLXN0YXRlLWxhdy11bml2ZXJzaXR5L2Vudmlyb25tZW50YWwtbGF3L2Nvcm9uYS1oYW5kYm9vay1qdWx5MjAyMC8xMDM4NjMwMiIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiVGhlIGJvb2ssIGF2YWlsYWJsZSBhcyBhIGRvd25sb2FkYWJsZSBQREYsICIpLAogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29yb25hIEhhbmQgQm9vayIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLCBhdHRyaWJ1dGVkIHRvIGhvbGlzdGljIGhlYWx0aGNhcmUgYWR2b2NhdGVzIGFuZCBmb29kIHNjaWVudGlzdHMgRHJzLiBLaGFkYXIgVmFsaSBhbmQgU2FyYWxhIEtoYWRhciwgcHJlcGFyZWQgYnkgdGhlIGdyb3VwIERyLiBLaGFkYXIgVmFsaSBMaWZlc3R5bGUsIGJhc2VkIG9uIHRoZSB2aWRlbyBwcmVzZW50YXRpb25zIG9mIERyLiBLaGFkYXIgVmFsaSwga25vd24gYXMgdGhlIE1pbGxldCBNYW4gb2YgSW5kaWEiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuYW1hem9uLmluL01pcmFjbGUtTWlsbGV0cy1IZWFscy1EaWFiZXRlcy1DYW5jZXJzLWVib29rL2RwL0IwODhDNTFGMzIiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkFtYXpvbi5jb206IE1pcmFjbGUgTWlsbGV0czogRm9vZCB0aGF0IEhlYWxzIERpYWJldGVzIHRvIENhbmNlcnM7IEJ5IERyLiBLaGFkYXIgVmFsaSIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwOi8vaGVhbHRoeW1pbGxldHMuaW4vIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJoZWFsdGh5bWlsbGV0cy5pbjogRHIuIEtoYWRhciBWYWxpIHwgTGVhcm4gSG93IFRvIEVhdCBIZWFsdGh5IFdpdGhvdXQgQWZmZWN0aW5nIFlvdXIgQnVzeSBMaWZlc3R5bGUiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9tYW5hdmF0YS5vcmcva2hhZGVydmFsaS8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRyLiBLaGFkYXIgVmFsaTogQnJpZWYgYmlvZ3JhcGh5LCB3b3JrIGFuZCBkb3dubG9hZGFibGUgYm9va3MiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1TLTF4RFpZcXJvSSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiKEhpbmRpKSBLaGV0aSBWaXJhYXNhdCBNaXNzaW9uOiBUb3dhcmRzIEhlYWx0aCB3aXRoIE1pbGxldHMgOiBBIHRhbGsgYnkgRHIgS2hhZGFyIFdhbGkgYXQgdmlsbGFnZSBTb2hhbmdhcmggUmF0dGV3YWxhOyBEZWMgMTQsIDIwMTkiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuYXl1c2guZ292LmluL2RvY3MvaG9tZW9wYXRoeS1ndWlkZWxpbmVzLnBkZiIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiR3VpZGVsaW5lcyBmb3IgSG9tZW9wYXRoaWMgUHJhY3RpdGlvbmVycyBmb3IgQ09WSUQtMTk7IE1pbmlzdHJ5IG9mIEFZVVNILCBHb3Zlcm5tZW50IG9mIEluZGlhIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8veW91dHUuYmUvZ09XZUJqVWZSakkiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIk1pbGxldCAvIFNpcnVkaGFhbml5YSBBbWJhbGkgKHNwcm91dGVkICsgZmVybWVudGVkIGhlYWx0aHkgcG9ycmlkZ2UpIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3Lndob2xlc29tZXRhbGVzLmNvbS9taWxsZXQtYW1iYWxpLWZlcm1lbnRlZC1kYWxpeWEtZnVsbC1yZWNpcGUvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJ3aG9sZXNvbWV0YWxlcy5jb206IE1pbGxldCBBbWJhbGkgKEZlcm1lbnRlZCBEYWxpeWEpIC0gRnVsbCBSZWNpcGU7IFN1amF0YTsgSmFuIDIsIDIwMjAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSGFuZGJvb2sgRm9yIEhlYWx0aCwgYSBjb21waWxhdGlvbiBvZiB0cmllZCBhbmQgdGVzdGVkIGhvbWUgcmVtZWRpZXMgYnkgS2VyYWxhIG5hdHVyb3BhdGgsIEFsYmVydCBZLiBaYWNoYXJpYSAoSW5uZXIgRXhwYW5zaW9uIENvYWNoLCArOTEgODkyMTY5NzkyOCkiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jUmp6ZGtxdTRTUSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiWW91VHViZS5jb206IFNhcHRhcGF0cmEgYW5kIEhvdyB0byBtYWtlIEthc2hheWFtIChEZWNvdGlvbikgfHwgR2lsb3kgKFRpcHBhIHRlZWdhKSBLYXNoYXlhbSB8fCBEci4gS2hhZGFyIFZhbGkiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuZHJob21lby5jb20vbWVkaWNpbmUvYnJ5b25pYS1hbGJhLWhvbWVvcGF0aGljLW1lZGljaW5lLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiZHJob21lby5jb206IEJyeW9uaWEgQWxiYSDigJMgSG9tZW9wYXRoaWMgTWVkaWNpbmU6IEl0cyBVc2VzLCBJbmRpY2F0aW9ucyBhbmQgRG9zYWdlOyBEci4gVmlrYXMgU2hhcm1hLCBNRCIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5kcmhvbWVvLmNvbS9tZWRpY2luZS9yaHVzLXRveC1ob21lb3BhdGhpYy1tZWRpY2luZS11c2VzLWluZGljYXRpb25zLWRvc2FnZS8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImRyaG9tZW8uY29tOiBSaHVzIFRveCDigJMgSG9tZW9wYXRoaWMgbWVkaWNpbmUsIGl0cyB1c2VzLCBpbmRpY2F0aW9ucyBhbmQgZG9zYWdlOyBEci4gVmlrYXMgU2hhcm1hLCBNRCIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZm9sbG93aW5nIGFydGljbGUgaW5kaWNhdGVzIHRoYXQgQnJ5b25pYSAoQWxiYSkgYW5kIFJodXMgVG94IGFyZSBuYXR1cmFsIGhvbWVvcGF0aGljIG1lZGljaW5lcyBwcmVzY3JpYmVkIGZvciBmZXZlciB3aXRoIGV4dHJlbWUgYm9keSBhY2hlLiBPZiB0aGVzZSwgQnJ5b25pYSBpcyBwcmVzY3JpYmVkIHdoZW4gdGhlIGZldmVyIGFuZCBib2R5IGFjaGUgYXJlIGFjY29tcGFuaWVkIGJ5IGV4dHJlbWUgZmF0aWd1ZSBhbmQgbGlzdGxlc3NuZXNzLCBhIGhhcmQsIGRyeSBjb3VnaCBhbmQgc2V2ZXJlIGhlYWRhY2hlLiBSaHVzIFRveCBpcyBwcmVzY3JpYmVkIHdoZW4gdGhlIGZldmVyIGFuZCBib2R5IGFjaGUgYXJlIGFjY29tcGFuaWVkIGJ5IHJlc3RsZXNzbmVzcy4gQXJzZW5pY3VtIEFsYnVtIGlzIGEgY29tbW9uIHJlbWVkeSBmb3IgbWFsYXJpYWwgZmV2ZXIsIGFjY29tcGFuaWVkIGJ5IGFueGlldHk6XG4iCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuZHJob21lby5jb20vZmV2ZXIvZmx1LXZpcmFsLWZldmVyLWFuZC1ob21lb3BhdGh5LXRyZWF0bWVudC8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImRyaG9tZW8uY29tOiA3IEJlc3QgSG9tZW9wYXRoaWMgTWVkaWNpbmVzIGZvciBGZXZlcjsgRHIuIFZpa2FzIFNoYXJtYSwgTUQiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuaGVhbHRobGluZS5jb20vaGVhbHRoL2JyeW9uaWEiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImhlYWx0aGxpbmUuY29tOiBXaGF0IElzIEJyeW9uaWEgYW5kIFNob3VsZCBZb3UgVXNlIEl0PyBbUHVycG9ydGVkIEJlbmVmaXRzLCBhbmQgUG90ZW50aWFsIFNpZGUgRWZmZWN0c107IEthdGhyeW4gV2F0c29uLCBNZWRpY2FsbHkgcmV2aWV3ZWQgYnkgTmF0YWxpZSBCdXRsZXIsIFJELCBMRDsgSmFuIDE3LCAyMDIwIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vdGltZXNvZmluZGlhLmluZGlhdGltZXMuY29tL2xpZmUtc3R5bGUvZm9vZC1uZXdzL2RyLXZhbGktc2F5cy1taWxsZXRzLXRha2Utc2l4LWhvdXJzLXRvLWRpZ2VzdC10aHVzLWRvbnQtc3Bpa2Utc3VnYXItbGV2ZWxzL2FydGljbGVzaG93Lzc4NDE0MzcyLmNtcyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGltZXMgb2YgSW5kaWE6IERyIFZhbGkgc2F5cyBtaWxsZXRzIHRha2Ugc2l4IGhvdXJzIHRvIGRpZ2VzdCwgdGh1cyBkb24ndCBzcGlrZSBzdWdhciBsZXZlbHM7IE9jdCAxLCAyMDIwIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9V19TZ3JoSlZVSkEiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIihIaW5kaSkgQW4gZWFzeSBtZXRob2QgdG8gb2J0YWluIGFkZXF1YXRlIHZpdGFtaW4gRCB0aHJvdWdoIGEgdmVnZXRhcmlhbiBkaWV0LCB3aXRob3V0IHRoZSBuZWVkIGZvciBzdW5iYXRoaW5nIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LnNpcmlqZWV2YW4ub3JnL2hvbWUiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIk11bHRpbGluZ3VhbCBjb21wcmVoZW5zaXZlIHdlYnNpdGUgZG9jdW1lbnRpbmcgRHIuIEtoYWRhciBWYWxpJ3Mgd29yayBhbmQgbWVzc2FnZSIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJfNC1ob21lb3BhdGhpYy10cmVhdG1lbnRzLXRvLW1pdGlnYXRlLXRoZS1pbmZsYW1tYXRpb24tY2F1c2VkLWJ5LXRoZS1zcGlrZS1nbHljb3Byb3RlaW5zLXBvc3QtdmFjY2luYXRpb24tdXNpbmctbWVkaWNhdGlvbnMtdGh1amEtMjAwLWFuZC1tZXJjLXNvbC0zMCIsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjXzQtaG9tZW9wYXRoaWMtdHJlYXRtZW50cy10by1taXRpZ2F0ZS10aGUtaW5mbGFtbWF0aW9uLWNhdXNlZC1ieS10aGUtc3Bpa2UtZ2x5Y29wcm90ZWlucy1wb3N0LXZhY2NpbmF0aW9uLXVzaW5nLW1lZGljYXRpb25zLXRodWphLTIwMC1hbmQtbWVyYy1zb2wtMzAiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgNC4gSG9tZW9wYXRoaWMgdHJlYXRtZW50cyB0byBtaXRpZ2F0ZSB0aGUgaW5mbGFtbWF0aW9uIGNhdXNlZCBieSB0aGUgc3Bpa2UgZ2x5Y29wcm90ZWlucyBwb3N0LXZhY2NpbmF0aW9uOyB1c2luZyBtZWRpY2F0aW9ucyBUaHVqYSAyMDAgYW5kIE1lcmMgc29sIDMwIgogICAgICAgICAgKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAib2JqZWN0aXZlLTQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI29iamVjdGl2ZS00IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBPYmplY3RpdmU6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlByaW1hcmlseSB0byBjb3VudGVyYWN0IHRoZSBlZmZlY3RzIG9mIHRoZSBzcGlrZSBwcm90ZWluIHRveGljaXR5IG9mIHRoZSBDb3ZpZC0xOSB2YWNjaW5lcyIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJzeXN0ZW0tNCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3lzdGVtLTQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN5c3RlbToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkhvbWVvcGF0aHkiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogeyBpZDogImNhbi1iZS11c2VkLWFsb25nc2lkZS1vdGhlci1hbGxvcGF0aGljLXRyZWF0bWVudHMtNCIgfSwKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2Nhbi1iZS11c2VkLWFsb25nc2lkZS1vdGhlci1hbGxvcGF0aGljLXRyZWF0bWVudHMtNCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIENhbiBiZSB1c2VkIGFsb25nc2lkZSBvdGhlciBhbGxvcGF0aGljIHRyZWF0bWVudHM6IiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk5vIGRydWcgaW50ZXJhY3Rpb25zIHJlcG9ydGVkLCBob3dldmVyIHRoaXMgbWF5IHJlcXVpcmUgZnVydGhlciBzdHVkeSIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJzdGF0dXMtb2YtYXV0aG9yaXNhdGlvbi00IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdGF0dXMtb2YtYXV0aG9yaXNhdGlvbi00IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN0YXR1cyBvZiBhdXRob3Jpc2F0aW9uOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJQcmVzY3JpYmVkIGJ5IGEgcHJhY3Rpc2luZyBob21lb3BhdGh5IHBoeXNpY2lhbi4gKEhvd2V2ZXIsIGl0IGlzIG9ic2VydmVkIHRoYXQgaW4gaG9tZW9wYXRoeSwgZXhhY3QgcHJvdG9jb2xzIGNhbiBvZnRlbiBkaWZmZXIgc2lnbmlmaWNhbnRseSBiZXR3ZWVuIHByYWN0aXRpb25lcnMuKSIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIGVzdGVlbWVkIGhvbWVvcGF0aCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9wYmhyZmluZGlhLm9yZy8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRyLiBQcmF0aWsgQmFubmVyamksIG9mIFByYXNhbnRhIEJhbm5lcmppIEhvbWVvcGF0aGljIFJlc2VhcmNoIEZvdW5kYXRpb24gKFBCSFJGKSwgS29sa2F0dGEiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgaGFzIHN0YXRlZCB0aGF0IHRoZXkgdXNlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5pbmRpYWJsb29tcy5jb20vaGVhbHRoLWRldGFpbHMvSC82MDkwL2luLWhvbWVvcGF0aHktd2UtcmVjb21tZW5kLXRodWphLTMwLWFzLXByZXZlbnRpb24tb2YtY29yb25hLWRyLXByYXRpcC1iYW5lcmppLmh0bWwiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoIlRodWphIDIwMCBhcyBhIHZlcnkgZWZmZWN0aXZlIHJlbWVkeSBmb3IgQ292aWQtMTkuIiksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicHJvdG9jb2wtYW5kLXRyZWF0bWVudC1hcHByb2FjaC00IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwcm90b2NvbC1hbmQtdHJlYXRtZW50LWFwcHJvYWNoLTQiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJvdG9jb2wgYW5kIHRyZWF0bWVudCBhcHByb2FjaDoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiVGh1amEgMjAwIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZvciA1IGRheXMsIDEgZG9zZSBvciBwaWxsIGF0IG5pZ2h0O1xudGhlIHJlZ2ltZW4gaXMgdG8gYmUgc3RhcnRlZCAxIGRheSBwcmlvciB0byB0aGUgdmFjY2luYXRpb24iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTWVyYyBzb2wiKV0pLAogICAgICAgIF92bS5fdigiIDMwIGZvciA1IGRheXMsIDIgZG9zZXMgb3IgcGlsbHMgZGFpbHkgZm9sbG93aW5nIHZhY2NpbmF0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInR5cGljYWwtZHVyYXRpb24tb2YtdHJlYXRtZW50LTQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3R5cGljYWwtZHVyYXRpb24tb2YtdHJlYXRtZW50LTQiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVHlwaWNhbCBkdXJhdGlvbiBvZiB0cmVhdG1lbnQ6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCI2IGRheXMsIGNvbW1lbmNpbmcgb24gdGhlIGRheSBiZWZvcmUgdGhlIHZhY2NpbmF0aW9uIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJvdXRjb21lLTQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI291dGNvbWUtNCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT3V0Y29tZToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSG9tZW9wYXRocyBjbGFpbSB0aGF0IHRoaXMgcHJvdG9jb2wgd291bGQgcmVtZWR5IHRoZSB2YXN0bHkgdW5kZXJyZXBvcnRlZCB0b3hpY2l0eSBvZiB0aGUgQ292aWQtMTkgdmFjY2luZXMiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic2lnbmlmaWNhbnQtc2lkZS1lZmZlY3RzLTQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NpZ25pZmljYW50LXNpZGUtZWZmZWN0cy00IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNpZ25pZmljYW50IHNpZGUgZWZmZWN0czoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIk5vbmUga25vd24gb3IgcmVwb3J0ZWQiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInJlY29tbWVuZGVkLXF1YW50aXR5LWZvci1zdG9ja2luZy00IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyZWNvbW1lbmRlZC1xdWFudGl0eS1mb3Itc3RvY2tpbmctNCIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSZWNvbW1lbmRlZCBxdWFudGl0eSBmb3Igc3RvY2tpbmc6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIGJlIGJvdWdodCBhbmQgc3RvY2tlZCB0byBiZWdpbiBkb3Npbmcgb24gdGhlIGRheSBiZWZvcmUgdmFjY2luYXRpb24uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInByaWNlLTQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3ByaWNlLTQiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUHJpY2U6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJJbmV4cGVuc2l2ZSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic3VnZ2VzdGVkLXN1cHBsaWVycy00IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdWdnZXN0ZWQtc3VwcGxpZXJzLTQiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3VnZ2VzdGVkIHN1cHBsaWVyczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkxvY2FsIGhvbWVvcGF0aGljIHN0b3JlcyBhbmQgb25saW5lIHN0b3JlcyIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZnVydGhlci1yZWZlcmVuY2VzLTQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Z1cnRoZXItcmVmZXJlbmNlcy00IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZ1cnRoZXIgcmVmZXJlbmNlczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFuZWNkb3RhbCBldmlkZW5jZSwgYWZ0ZXIgY29uc3VsdGF0aW9uIHdpdGggaG9tZW9wYXRocyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjdHl5IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjdHl5IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENUWVkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAib2JqZWN0aXZlLTUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI29iamVjdGl2ZS01IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBPYmplY3RpdmU6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInN5c3RlbS01IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzeXN0ZW0tNSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3lzdGVtOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJjYW4tYmUtdXNlZC1hbG9uZ3NpZGUtb3RoZXItYWxsb3BhdGhpYy10cmVhdG1lbnRzLTUiIH0sCiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNjYW4tYmUtdXNlZC1hbG9uZ3NpZGUtb3RoZXItYWxsb3BhdGhpYy10cmVhdG1lbnRzLTUiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBDYW4gYmUgdXNlZCBhbG9uZ3NpZGUgb3RoZXIgYWxsb3BhdGhpYyB0cmVhdG1lbnRzOiIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJzdGF0dXMtb2YtYXV0aG9yaXNhdGlvbi01IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdGF0dXMtb2YtYXV0aG9yaXNhdGlvbi01IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFN0YXR1cyBvZiBhdXRob3Jpc2F0aW9uOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcm90b2NvbC1hbmQtdHJlYXRtZW50LWFwcHJvYWNoLTUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Byb3RvY29sLWFuZC10cmVhdG1lbnQtYXBwcm9hY2gtNSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQcm90b2NvbCBhbmQgdHJlYXRtZW50IGFwcHJvYWNoOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ0eXBpY2FsLWR1cmF0aW9uLW9mLXRyZWF0bWVudC01IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN0eXBpY2FsLWR1cmF0aW9uLW9mLXRyZWF0bWVudC01IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFR5cGljYWwgZHVyYXRpb24gb2YgdHJlYXRtZW50OiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJvdXRjb21lLTUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI291dGNvbWUtNSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT3V0Y29tZToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic2lnbmlmaWNhbnQtc2lkZS1lZmZlY3RzLTUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NpZ25pZmljYW50LXNpZGUtZWZmZWN0cy01IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNpZ25pZmljYW50IHNpZGUgZWZmZWN0czoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicmVjb21tZW5kZWQtcXVhbnRpdHktZm9yLXN0b2NraW5nLTUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JlY29tbWVuZGVkLXF1YW50aXR5LWZvci1zdG9ja2luZy01IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlY29tbWVuZGVkIHF1YW50aXR5IGZvciBzdG9ja2luZzoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicHJpY2UtNSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJpY2UtNSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBQcmljZToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic3VnZ2VzdGVkLXN1cHBsaWVycy01IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNzdWdnZXN0ZWQtc3VwcGxpZXJzLTUiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3VnZ2VzdGVkIHN1cHBsaWVyczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZnVydGhlci1yZWZlcmVuY2VzLTUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Z1cnRoZXItcmVmZXJlbmNlcy01IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZ1cnRoZXIgcmVmZXJlbmNlczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIls5M11cbls5NF1cbls5NV06XG5bOTZdOlxuWzk3XTpcbls5OF06XG5bOTldOlxuWzEwMF06IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIltdOlxuW106XG5bXTpcbltdOlxuW106XG5bXTpcbltdOlxuW106XG5bXTpcbltdOlxuW106XG5bXTpcbltdOlxuW106XG5bXTpcbltdOlxuW106XG5bXTpcbltdOlxuW106XG5bXTpcbltdOlxuW106XG5bXTpcbltdOlxuW106XG5bXTpcbltdOlxuW106XG5bXTpcbltdOlxuW106IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJbOTRdXG5bOTVdOlxuWzk2XTpcbls5N106XG5bOThdOlxuWzk5XTpcblsxMDBdOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiU1QiU1RDoiIH0gfSwgW192bS5fdigiMjcwIildKSwKICAgICAgICBfdm0uX3YoIjoiKSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}