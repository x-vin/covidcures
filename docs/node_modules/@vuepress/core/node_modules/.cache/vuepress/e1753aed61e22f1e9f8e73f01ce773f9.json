{"remainingRequest":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/x/repos/covidcures/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/x/repos/covidcures/docs/src/intprophyproto.md?vue&type=template&id=beab6d9a&","dependencies":[{"path":"/Users/x/repos/covidcures/docs/src/intprophyproto.md","mtime":1640947850723},{"path":"/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js","mtime":1640777136168},{"path":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640777136396},{"path":"/Users/x/repos/covidcures/docs/node_modules/cache-loader/dist/cjs.js","mtime":1640777136168},{"path":"/Users/x/repos/covidcures/docs/node_modules/vue-loader/lib/index.js","mtime":1640777136291},{"path":"/Users/x/repos/covidcures/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1640777135896}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}